// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Currently supported settings configurations are:
 *  - Attributes
 *
 * <br />
 * <br />
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as satori from "@satoricyber/pulumi-satori";
 *
 * const settingsForUserJsonPath = new satori.UserSettings("settingsForUserJsonPath", {
 *     userId: local.user_id_to_configure_settings_on,
 *     attributes: fs.readFileSync(`${path.module}/attributes/user_a.json`, "utf8"),
 * });
 * const settingsForUserRawJson = new satori.UserSettings("settingsForUserRawJson", {
 *     userId: local.user_id_to_configure_settings_on,
 *     attributes: JSON.stringify({
 *         name: "William",
 *         age: 30.5,
 *         cities: [
 *             "Tel Aviv",
 *             "London",
 *             "Lisbon",
 *         ],
 *         is_active: true,
 *         kids_ages: [
 *             1,
 *             5,
 *             6.5,
 *         ],
 *     }),
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Where the 'user_a.json' file is a JSON map object, for example:
 */
export class UserSettings extends pulumi.CustomResource {
    /**
     * Get an existing UserSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserSettingsState, opts?: pulumi.CustomResourceOptions): UserSettings {
        return new UserSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'satori:index/userSettings:UserSettings';

    /**
     * Returns true if the given object is an instance of UserSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserSettings.__pulumiType;
    }

    /**
     * User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: "./attribute*files/user*a.json" OR "{"company": "SatoriCyber","age": 30.5,"cities": ["Washington", "Lisbon"],"kidsAge": [1, 3.14759, 7], "isActive": true}"
     */
    public readonly attributes!: pulumi.Output<string>;
    /**
     * User ID to manage settings for.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserSettingsArgs | UserSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserSettingsState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserSettingsArgs | undefined;
            if ((!args || args.attributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributes'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserSettings resources.
 */
export interface UserSettingsState {
    /**
     * User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: "./attribute*files/user*a.json" OR "{"company": "SatoriCyber","age": 30.5,"cities": ["Washington", "Lisbon"],"kidsAge": [1, 3.14759, 7], "isActive": true}"
     */
    attributes?: pulumi.Input<string>;
    /**
     * User ID to manage settings for.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserSettings resource.
 */
export interface UserSettingsArgs {
    /**
     * User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: "./attribute*files/user*a.json" OR "{"company": "SatoriCyber","age": 30.5,"cities": ["Washington", "Lisbon"],"kidsAge": [1, 3.14759, 7], "isActive": true}"
     */
    attributes: pulumi.Input<string>;
    /**
     * User ID to manage settings for.
     */
    userId: pulumi.Input<string>;
}
