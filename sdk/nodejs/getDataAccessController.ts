// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **satori_data_access_controller** data source allows finding DAC details by its region, cloud provider, type and ID.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as satori from "@pulumi/satori";
 * import * as satori from "@satoricyber/pulumi-satori";
 *
 * const dataaccessControllerId = "<assigned dataaccess_controller_id>";
 * const publicDac = satori.getDataAccessController({
 *     type: "PUBLIC",
 *     region: "<assigned region>",
 *     cloudProvider: "<assigned cloud provider>",
 * });
 * const privateDac = satori.getDataAccessController({
 *     type: "<assigned type - PRIVATE | PRIVATE_MANAGED>",
 *     id: "<assigned id>",
 * });
 * const datastore0 = new satori.Datastore("datastore0", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: dataaccessControllerId,
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     baselineSecurityPolicy: {
 *         unassociatedQueriesCategory: {
 *             queryAction: "PASS",
 *         },
 *         unsupportedQueriesCategory: {
 *             queryAction: "PASS",
 *         },
 *         exclusions: {},
 *     },
 *     networkPolicies: [{}],
 * });
 * const datastoreWithIgnorePasswordUpdate = new satori.Datastore("datastoreWithIgnorePasswordUpdate", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     satoriAuthSettings: {
 *         enabled: true,
 *         credentials: {
 *             password: "*********",
 *             username: "adminuser",
 *         },
 *     },
 *     networkPolicies: [{}],
 * });
 * // Example of creating a datastore with personal access token enabled
 * // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.
 * // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).
 * const datastoreWithPersonalAccessTokenEnabled = new satori.Datastore("datastoreWithPersonalAccessTokenEnabled", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     satoriAuthSettings: {
 *         enabled: true,
 *         credentials: {
 *             password: "*********",
 *             username: "adminuser",
 *         },
 *         enablePersonalAccessToken: true,
 *     },
 *     networkPolicies: [{}],
 * });
 * const datastoreWithPrivateDac = new satori.Datastore("datastoreWithPrivateDac", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: privateDac.then(privateDac => privateDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     networkPolicies: [{}],
 * });
 * const mongodbDatastore = new satori.Datastore("mongodbDatastore", {
 *     hostname: "mongo.example.mongodb.net",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "MONGO",
 *     datastoreSettings: [{
 *         deploymentType: "MONGODB_SRV",
 *     }],
 *     networkPolicies: [{}],
 * });
 * export const datastoreCreatedId = datastore0.id;
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDataAccessController(args: GetDataAccessControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetDataAccessControllerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("satori:index/getDataAccessController:getDataAccessController", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "region": args.region,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataAccessController.
 */
export interface GetDataAccessControllerArgs {
    /**
     * DAC's cloud provider.
     */
    cloudProvider?: string;
    /**
     * DAC's ID.
     */
    id?: string;
    /**
     * DAC's region.
     */
    region?: string;
    /**
     * DAC's type. The available values are: PRIVATE, PRIVATE_MANAGED or PUBLIC.
     */
    type: string;
}

/**
 * A collection of values returned by getDataAccessController.
 */
export interface GetDataAccessControllerResult {
    /**
     * DAC's cloud provider.
     */
    readonly cloudProvider?: string;
    /**
     * DAC's ID.
     */
    readonly id?: string;
    /**
     * DAC's IPs list.
     */
    readonly ips: string[];
    /**
     * DAC's region.
     */
    readonly region?: string;
    /**
     * DAC's type. The available values are: PRIVATE, PRIVATE_MANAGED or PUBLIC.
     */
    readonly type: string;
}
/**
 * The **satori_data_access_controller** data source allows finding DAC details by its region, cloud provider, type and ID.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as satori from "@pulumi/satori";
 * import * as satori from "@satoricyber/pulumi-satori";
 *
 * const dataaccessControllerId = "<assigned dataaccess_controller_id>";
 * const publicDac = satori.getDataAccessController({
 *     type: "PUBLIC",
 *     region: "<assigned region>",
 *     cloudProvider: "<assigned cloud provider>",
 * });
 * const privateDac = satori.getDataAccessController({
 *     type: "<assigned type - PRIVATE | PRIVATE_MANAGED>",
 *     id: "<assigned id>",
 * });
 * const datastore0 = new satori.Datastore("datastore0", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: dataaccessControllerId,
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     baselineSecurityPolicy: {
 *         unassociatedQueriesCategory: {
 *             queryAction: "PASS",
 *         },
 *         unsupportedQueriesCategory: {
 *             queryAction: "PASS",
 *         },
 *         exclusions: {},
 *     },
 *     networkPolicies: [{}],
 * });
 * const datastoreWithIgnorePasswordUpdate = new satori.Datastore("datastoreWithIgnorePasswordUpdate", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     satoriAuthSettings: {
 *         enabled: true,
 *         credentials: {
 *             password: "*********",
 *             username: "adminuser",
 *         },
 *     },
 *     networkPolicies: [{}],
 * });
 * // Example of creating a datastore with personal access token enabled
 * // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.
 * // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).
 * const datastoreWithPersonalAccessTokenEnabled = new satori.Datastore("datastoreWithPersonalAccessTokenEnabled", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     satoriAuthSettings: {
 *         enabled: true,
 *         credentials: {
 *             password: "*********",
 *             username: "adminuser",
 *         },
 *         enablePersonalAccessToken: true,
 *     },
 *     networkPolicies: [{}],
 * });
 * const datastoreWithPrivateDac = new satori.Datastore("datastoreWithPrivateDac", {
 *     hostname: "data.source.target.hostname",
 *     dataaccessControllerId: privateDac.then(privateDac => privateDac.id),
 *     type: "SNOWFLAKE",
 *     originPort: 8081,
 *     networkPolicies: [{}],
 * });
 * const mongodbDatastore = new satori.Datastore("mongodbDatastore", {
 *     hostname: "mongo.example.mongodb.net",
 *     dataaccessControllerId: publicDac.then(publicDac => publicDac.id),
 *     type: "MONGO",
 *     datastoreSettings: [{
 *         deploymentType: "MONGODB_SRV",
 *     }],
 *     networkPolicies: [{}],
 * });
 * export const datastoreCreatedId = datastore0.id;
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDataAccessControllerOutput(args: GetDataAccessControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataAccessControllerResult> {
    return pulumi.output(args).apply((a: any) => getDataAccessController(a, opts))
}

/**
 * A collection of arguments for invoking getDataAccessController.
 */
export interface GetDataAccessControllerOutputArgs {
    /**
     * DAC's cloud provider.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * DAC's ID.
     */
    id?: pulumi.Input<string>;
    /**
     * DAC's region.
     */
    region?: pulumi.Input<string>;
    /**
     * DAC's type. The available values are: PRIVATE, PRIVATE_MANAGED or PUBLIC.
     */
    type: pulumi.Input<string>;
}
