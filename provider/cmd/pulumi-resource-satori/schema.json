{
    "name": "satori",
    "displayName": "SatoriCyber",
    "description": "A Pulumi package for creating and managing satori cloud resources.",
    "keywords": [
        "SatoriCyber",
        "satori",
        "category/utility"
    ],
    "homepage": "https://www.satoricyber.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`satori` Terraform Provider](https://github.com/satoricyber/terraform-provider-satori).",
    "repository": "https://github.com/satoricyber/pulumi-satori",
    "logoUrl": "https://avatars.githubusercontent.com/u/59790990?s=200\u0026v=4",
    "pluginDownloadURL": "https://github.com/SatoriCyber/pulumi-satori/releases/download/v${VERSION}",
    "publisher": "SatoriCyber",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Satoricyber"
        },
        "go": {
            "importBasePath": "github.com/SatoriCyber/pulumi-satori/sdk/go/satori",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@satoricyber/pulumi-satori",
            "packageDescription": "A Pulumi package for creating and managing satori cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/satoricyber/terraform-provider-satori)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-satori` repo](https://github.com/satoricyber/pulumi-satori/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-satori` repo](https://github.com/satoricyber/terraform-provider-satori/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "satori_resources_config",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/satoricyber/terraform-provider-satori)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-satori` repo](https://github.com/satoricyber/pulumi-satori/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-satori` repo](https://github.com/satoricyber/terraform-provider-satori/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "satoriAccount": {
                "type": "string",
                "description": "Your Satori account ID.\n"
            },
            "serviceAccount": {
                "type": "string",
                "description": "Service account ID with administrative privileges. Can be specified with the `SATORI_SA` environment variable.\n"
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key. Can be specified with the `SATORI_SA_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "default": "https://app.satoricyber.com",
                "defaultInfo": {
                    "environment": [
                        "SATORI_URL"
                    ]
                }
            },
            "verifyTls": {
                "type": "boolean"
            }
        },
        "defaults": [
            "satoriAccount"
        ]
    },
    "types": {
        "satori:index/AccessRuleIdentity:AccessRuleIdentity": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for identity of type GROUP.\nCan not be changed after creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP.\nCan not be changed after creation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/CustomTaxonomyClassifierCustomConfig:CustomTaxonomyClassifierCustomConfig": {
            "properties": {
                "fieldNamePattern": {
                    "type": "string",
                    "description": "Field name pattern.\n"
                },
                "fieldType": {
                    "type": "string",
                    "description": "Field type, valid types are: ANY, TEXT, NUMERIC, DATE.\n"
                },
                "valueCaseSensitive": {
                    "type": "boolean",
                    "description": "Should value match be case sensitive. Defaults to `true`.\n"
                },
                "valuePattern": {
                    "type": "string",
                    "description": "Value pattern.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of possible field values.\n"
                }
            },
            "type": "object",
            "required": [
                "fieldType"
            ]
        },
        "satori:index/CustomTaxonomyClassifierSatoriBasedConfig:CustomTaxonomyClassifierSatoriBasedConfig": {
            "properties": {
                "satoriBaseClassifier": {
                    "type": "string",
                    "description": "Base Satori classifier ID.\nSee https://satoricyber.com/docs/taxonomy/standard-classifiers for a list of possible values.\n"
                }
            },
            "type": "object",
            "required": [
                "satoriBaseClassifier"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScope:CustomTaxonomyClassifierScope": {
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of datasets to include in the scope.\n"
                },
                "includeLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocation:CustomTaxonomyClassifierScopeIncludeLocation"
                    },
                    "description": "Location to include in the scope.\n"
                }
            },
            "type": "object"
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocation:CustomTaxonomyClassifierScopeIncludeLocation": {
            "properties": {
                "datastore": {
                    "type": "string",
                    "description": "Data store ID.\n"
                },
                "location": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocation:CustomTaxonomyClassifierScopeIncludeLocationLocation",
                    "description": "Location for a data store. Can include only one location type field from the above: relational*location, mysql*location, athena*location, mongo*location and s3*location . Conflicts with 'relational*location' field.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation:CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation",
                    "description": "Location for a relational data store.\n",
                    "deprecationMessage": "The 'relational_location' field has been deprecated. Please use the 'location' field instead."
                }
            },
            "type": "object",
            "required": [
                "datastore"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocation:CustomTaxonomyClassifierScopeIncludeLocationLocation": {
            "properties": {
                "athenaLocation": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation",
                    "description": "Location for Athena data store.\n"
                },
                "mongoLocation": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation",
                    "description": "Location for MongoDB data store.\n"
                },
                "mysqlLocation": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation",
                    "description": "Location for MySql and MariaDB data stores.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation",
                    "description": "Location for a relational data store.\n"
                },
                "s3Location": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location:CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location",
                    "description": "Location for S3 data store.\n"
                }
            },
            "type": "object"
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationAthenaLocation": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "catalog"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationMongoLocation": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "Collection name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationMysqlLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation:CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location:CustomTaxonomyClassifierScopeIncludeLocationLocationS3Location": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name.\n"
                },
                "objectKey": {
                    "type": "string",
                    "description": "Object Key name.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "satori:index/CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation:CustomTaxonomyClassifierScopeIncludeLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetAccessControlSettings:DatasetAccessControlSettings": {
            "properties": {
                "enableAccessControl": {
                    "type": "boolean",
                    "description": "Enforce access control to this dataset. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatasetCustomPolicy:DatasetCustomPolicy": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "description": "Dataset custom policy priority. Defaults to `100`.\n"
                },
                "rulesYaml": {
                    "type": "string",
                    "description": "Custom policy rules YAML.\n"
                },
                "tagsYaml": {
                    "type": "string",
                    "description": "Custom policy tags YAML.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatasetDefinition:DatasetDefinition": {
            "properties": {
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatasetDefinitionApprover:DatasetDefinitionApprover"
                    },
                    "description": "Identities of Satori users/groups that will be set as dataset approvers.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Dataset description.\n"
                },
                "excludeLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocation:DatasetDefinitionExcludeLocation"
                    },
                    "description": "Location to exclude from dataset.\n"
                },
                "includeLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocation:DatasetDefinitionIncludeLocation"
                    },
                    "description": "Location to include in dataset.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Dataset name.\n"
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of Satori users that will be set as dataset owners.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "satori:index/DatasetDefinitionApprover:DatasetDefinitionApprover": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the approver entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "Approver type, can be either `GROUP` (IdP Group alone) or `USER`\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocation:DatasetDefinitionExcludeLocation": {
            "properties": {
                "datastore": {
                    "type": "string",
                    "description": "Data store ID.\n"
                },
                "location": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocation:DatasetDefinitionExcludeLocationLocation",
                    "description": "Location for a data store. Can include only one location type field from the above: relational*location, mysql*location, athena*location, mongo*location and s3*location . Conflicts with 'relational*location' field.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationRelationalLocation:DatasetDefinitionExcludeLocationRelationalLocation",
                    "description": "Location for a relational data store.\n",
                    "deprecationMessage": "The 'relational_location' field has been deprecated. Please use the 'location' field instead."
                }
            },
            "type": "object",
            "required": [
                "datastore"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationLocation:DatasetDefinitionExcludeLocationLocation": {
            "properties": {
                "athenaLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocationAthenaLocation:DatasetDefinitionExcludeLocationLocationAthenaLocation",
                    "description": "Location for Athena data store.\n"
                },
                "mongoLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocationMongoLocation:DatasetDefinitionExcludeLocationLocationMongoLocation",
                    "description": "Location for MongoDB data store.\n"
                },
                "mysqlLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocationMysqlLocation:DatasetDefinitionExcludeLocationLocationMysqlLocation",
                    "description": "Location for MySql and MariaDB data stores.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocationRelationalLocation:DatasetDefinitionExcludeLocationLocationRelationalLocation",
                    "description": "Location for a relational data store.\n"
                },
                "s3Location": {
                    "$ref": "#/types/satori:index/DatasetDefinitionExcludeLocationLocationS3Location:DatasetDefinitionExcludeLocationLocationS3Location",
                    "description": "Location for S3 data store.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatasetDefinitionExcludeLocationLocationAthenaLocation:DatasetDefinitionExcludeLocationLocationAthenaLocation": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "catalog"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationLocationMongoLocation:DatasetDefinitionExcludeLocationLocationMongoLocation": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "Collection name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationLocationMysqlLocation:DatasetDefinitionExcludeLocationLocationMysqlLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationLocationRelationalLocation:DatasetDefinitionExcludeLocationLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationLocationS3Location:DatasetDefinitionExcludeLocationLocationS3Location": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name.\n"
                },
                "objectKey": {
                    "type": "string",
                    "description": "Object Key name.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "satori:index/DatasetDefinitionExcludeLocationRelationalLocation:DatasetDefinitionExcludeLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocation:DatasetDefinitionIncludeLocation": {
            "properties": {
                "datastore": {
                    "type": "string",
                    "description": "Data store ID.\n"
                },
                "location": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocation:DatasetDefinitionIncludeLocationLocation",
                    "description": "Location for a data store. Can include only one location type field from the above: relational*location, mysql*location, athena*location, mongo*location and s3*location . Conflicts with 'relational*location' field.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationRelationalLocation:DatasetDefinitionIncludeLocationRelationalLocation",
                    "description": "Location for a relational data store.\n",
                    "deprecationMessage": "The 'relational_location' field has been deprecated. Please use the 'location' field instead."
                }
            },
            "type": "object",
            "required": [
                "datastore"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationLocation:DatasetDefinitionIncludeLocationLocation": {
            "properties": {
                "athenaLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocationAthenaLocation:DatasetDefinitionIncludeLocationLocationAthenaLocation",
                    "description": "Location for Athena data store.\n"
                },
                "mongoLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocationMongoLocation:DatasetDefinitionIncludeLocationLocationMongoLocation",
                    "description": "Location for MongoDB data store.\n"
                },
                "mysqlLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocationMysqlLocation:DatasetDefinitionIncludeLocationLocationMysqlLocation",
                    "description": "Location for MySql and MariaDB data stores.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocationRelationalLocation:DatasetDefinitionIncludeLocationLocationRelationalLocation",
                    "description": "Location for a relational data store.\n"
                },
                "s3Location": {
                    "$ref": "#/types/satori:index/DatasetDefinitionIncludeLocationLocationS3Location:DatasetDefinitionIncludeLocationLocationS3Location",
                    "description": "Location for S3 data store.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatasetDefinitionIncludeLocationLocationAthenaLocation:DatasetDefinitionIncludeLocationLocationAthenaLocation": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "catalog"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationLocationMongoLocation:DatasetDefinitionIncludeLocationLocationMongoLocation": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "Collection name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationLocationMysqlLocation:DatasetDefinitionIncludeLocationLocationMysqlLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationLocationRelationalLocation:DatasetDefinitionIncludeLocationLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationLocationS3Location:DatasetDefinitionIncludeLocationLocationS3Location": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name.\n"
                },
                "objectKey": {
                    "type": "string",
                    "description": "Object Key name.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "satori:index/DatasetDefinitionIncludeLocationRelationalLocation:DatasetDefinitionIncludeLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/DatastoreBaselineSecurityPolicy:DatastoreBaselineSecurityPolicy": {
            "properties": {
                "exclusions": {
                    "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicyExclusions:DatastoreBaselineSecurityPolicyExclusions",
                    "description": "Exempt users and patterns from baseline security policy\n"
                },
                "type": {
                    "type": "string",
                    "description": "DataStore security policy. Defaults to `BASELINE_POLICY`.\n"
                },
                "unassociatedQueriesCategory": {
                    "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory:DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory",
                    "description": "UnassociatedQueriesCategory\n"
                },
                "unsupportedQueriesCategory": {
                    "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory:DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory",
                    "description": "UnsupportedQueriesCategory\n"
                }
            },
            "type": "object",
            "required": [
                "exclusions",
                "unassociatedQueriesCategory",
                "unsupportedQueriesCategory"
            ]
        },
        "satori:index/DatastoreBaselineSecurityPolicyExclusions:DatastoreBaselineSecurityPolicyExclusions": {
            "properties": {
                "excludedIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity:DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity"
                    },
                    "description": "Exempt Users from the Baseline Security Policy\n"
                },
                "excludedQueryPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern:DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern"
                    },
                    "description": "Exempt Queries from the Baseline Security Policy\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity:DatastoreBaselineSecurityPolicyExclusionsExcludedIdentity": {
            "properties": {
                "identity": {
                    "type": "string",
                    "description": "Username\n"
                },
                "identityType": {
                    "type": "string",
                    "description": "USER type is supported\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern:DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPattern": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "Query pattern\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory:DatastoreBaselineSecurityPolicyUnassociatedQueriesCategory": {
            "properties": {
                "queryAction": {
                    "type": "string",
                    "description": "Default policy action for querying locations that are not associated with a dataset, modes supported:  PASS┃REDACT┃BLOCK.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory:DatastoreBaselineSecurityPolicyUnsupportedQueriesCategory": {
            "properties": {
                "queryAction": {
                    "type": "string",
                    "description": "Default policy action for querying locations that are not associated with a dataset, modes supported:  PASS┃REDACT┃BLOCK.\n"
                }
            },
            "type": "object",
            "required": [
                "queryAction"
            ]
        },
        "satori:index/DatastoreDatastoreSetting:DatastoreDatastoreSetting": {
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "MongoDB deployment type, for now supports only mongodb+srv and mongodb deployment\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreNetworkPolicy:DatastoreNetworkPolicy": {
            "properties": {
                "allowedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicyAllowedRule:DatastoreNetworkPolicyAllowedRule"
                    },
                    "description": "Allowed Ip Rules\n"
                },
                "blockedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicyBlockedRule:DatastoreNetworkPolicyBlockedRule"
                    },
                    "description": "Blocked Ips Rules\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreNetworkPolicyAllowedRule:DatastoreNetworkPolicyAllowedRule": {
            "properties": {
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicyAllowedRuleIpRange:DatastoreNetworkPolicyAllowedRuleIpRange"
                    },
                    "description": "Defines IP addresses or CIDR ranges allowed to access the datastore\n"
                },
                "note": {
                    "type": "string",
                    "description": "custom description for allowed IP ranges\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreNetworkPolicyAllowedRuleIpRange:DatastoreNetworkPolicyAllowedRuleIpRange": {
            "properties": {
                "ipRange": {
                    "type": "string",
                    "description": "Range (IP or CIDR)\n"
                }
            },
            "type": "object",
            "required": [
                "ipRange"
            ]
        },
        "satori:index/DatastoreNetworkPolicyBlockedRule:DatastoreNetworkPolicyBlockedRule": {
            "properties": {
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicyBlockedRuleIpRange:DatastoreNetworkPolicyBlockedRuleIpRange"
                    },
                    "description": "Defines IP addresses or CIDR ranges allowed to access the datastore\n"
                },
                "note": {
                    "type": "string",
                    "description": "custom description for allowed IP ranges\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreNetworkPolicyBlockedRuleIpRange:DatastoreNetworkPolicyBlockedRuleIpRange": {
            "properties": {
                "ipRange": {
                    "type": "string",
                    "description": "Range (IP or CIDR)\n"
                }
            },
            "type": "object",
            "required": [
                "ipRange"
            ]
        },
        "satori:index/DatastoreSatoriAuthSettings:DatastoreSatoriAuthSettings": {
            "properties": {
                "credentials": {
                    "$ref": "#/types/satori:index/DatastoreSatoriAuthSettingsCredentials:DatastoreSatoriAuthSettingsCredentials",
                    "description": "Root user credentials\n"
                },
                "enablePersonalAccessToken": {
                    "type": "boolean",
                    "description": "Enables Satori Personal Access Token authentication for this data store. to be able using personal access token for authentication on this data store - data store temporary credentials must be enabled and personal access token feature should be enabled for the current account (see Account setting page in Satori platform). Defaults to `false`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enables Satori Data Store authentication. Defaults to `false`.\n"
                }
            },
            "type": "object"
        },
        "satori:index/DatastoreSatoriAuthSettingsCredentials:DatastoreSatoriAuthSettingsCredentials": {
            "properties": {
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username of root user\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "satori:index/DirectoryGroupMember:DirectoryGroupMember": {
            "properties": {
                "dataStoreType": {
                    "type": "string",
                    "description": "Data store type for member of type DB_ROLE, valid types are: SNOWFLAKE, REDSHIFT, BIGQUERY, POSTGRESQL, ATHENA, MSSQL, SYNAPSE\n"
                },
                "email": {
                    "type": "string",
                    "description": "Member email available for types: USERNAME.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for member of type DIRECTORY_GROUP.\n"
                },
                "identityProvider": {
                    "type": "string",
                    "description": "Identity provider type for member of type IDP_GROUP, valid identity providers are: OKTA, AZURE, ONELOGIN\n"
                },
                "name": {
                    "type": "string",
                    "description": "Member name for types: USERNAME, IDP*GROUP and DB*ROLE.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Member type, valid types are: USERNAME, IDP*GROUP, DB*ROLE, DIRECTORY_GROUP.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/MaskingProfileCondition:MaskingProfileCondition": {
            "properties": {
                "replacement": {
                    "type": "string",
                    "description": "Replacement, relevant for: REPLACE*CHAR, REPLACE*STRING.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag.\n"
                },
                "truncate": {
                    "type": "integer",
                    "description": "Truncate, relevant for: TRUNCATE.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type. Can be one of [TRUNCATE, REPLACE*CHAR, REPLACE*STRING, HASH, EMAIL*PREFIX, EMAIL*SUFFIX, EMAIL*FULL, EMAIL*HASH, CREDIT*CARD*PREFIX, CREDIT*CARD*FULL, CREDIT*CARD*HASH, IP*SUFFIX, IP*FULL, IP*HASH, DATE*YEAR*ONLY, DATE*1970*AGAIN, NO*ACTION, REDACT, NUMBER*ZERO, NUMBER*ROUND, ...]\n"
                }
            },
            "type": "object",
            "required": [
                "tag",
                "type"
            ]
        },
        "satori:index/RequestAccessRuleApprover:RequestAccessRuleApprover": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the approver entity, when type is `MANAGER` this field must not be set.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Approver type, can be either `GROUP` (IdP Group alone) or `USER`\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/RequestAccessRuleExpireIn:RequestAccessRuleExpireIn": {
            "properties": {
                "unitType": {
                    "type": "string",
                    "description": "Unit type for units field, possible values are: MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS.\n"
                },
                "units": {
                    "type": "integer",
                    "description": "Number of units of unit_type.\n"
                }
            },
            "type": "object",
            "required": [
                "unitType",
                "units"
            ]
        },
        "satori:index/RequestAccessRuleIdentity:RequestAccessRuleIdentity": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for identity of type GROUP.\nCan not be changed after creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP.\nCan not be changed after creation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/SecurityPolicyProfile:SecurityPolicyProfile": {
            "properties": {
                "masking": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileMasking:SecurityPolicyProfileMasking",
                    "description": "Masking profile.\n"
                },
                "rowLevelSecurity": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurity:SecurityPolicyProfileRowLevelSecurity",
                    "description": "Row level security profile\n"
                }
            },
            "type": "object"
        },
        "satori:index/SecurityPolicyProfileMasking:SecurityPolicyProfileMasking": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Is active.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfileMaskingRule:SecurityPolicyProfileMaskingRule"
                    },
                    "description": "Masking Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "active"
            ]
        },
        "satori:index/SecurityPolicyProfileMaskingRule:SecurityPolicyProfileMaskingRule": {
            "properties": {
                "action": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileMaskingRuleAction:SecurityPolicyProfileMaskingRuleAction",
                    "description": "Rule action.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Is active.\n"
                },
                "criteria": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileMaskingRuleCriteria:SecurityPolicyProfileMaskingRuleCriteria",
                    "description": "Masking criteria.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Rule description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Rule id, has to be unique.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "active",
                "criteria",
                "description",
                "id"
            ]
        },
        "satori:index/SecurityPolicyProfileMaskingRuleAction:SecurityPolicyProfileMaskingRuleAction": {
            "properties": {
                "maskingProfileId": {
                    "type": "string",
                    "description": "The reference id to be applied as masking profile.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, CEL, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "maskingProfileId"
            ]
        },
        "satori:index/SecurityPolicyProfileMaskingRuleCriteria:SecurityPolicyProfileMaskingRuleCriteria": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Identity condition, for example IS_NOT, IS, etc.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileMaskingRuleCriteriaIdentity:SecurityPolicyProfileMaskingRuleCriteriaIdentity",
                    "description": "Identity to apply the rule for.\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "identity"
            ]
        },
        "satori:index/SecurityPolicyProfileMaskingRuleCriteriaIdentity:SecurityPolicyProfileMaskingRuleCriteriaIdentity": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for identity of type GROUP.\nCan not be changed after creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, CEL, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurity:SecurityPolicyProfileRowLevelSecurity": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Is active.\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMapping:SecurityPolicyProfileRowLevelSecurityMapping"
                    },
                    "description": "Row Level Security Mapping.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRule:SecurityPolicyProfileRowLevelSecurityRule"
                    },
                    "description": "Masking Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "active"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMapping:SecurityPolicyProfileRowLevelSecurityMapping": {
            "properties": {
                "defaults": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMappingDefaults:SecurityPolicyProfileRowLevelSecurityMappingDefaults",
                    "description": "A list of default values to be applied in this filter if there was no match. Values are dependent on their type and has to be homogeneous\n"
                },
                "filter": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilter:SecurityPolicyProfileRowLevelSecurityMappingFilter",
                    "description": "Filter definition.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "defaults",
                "filter",
                "name"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMappingDefaults:SecurityPolicyProfileRowLevelSecurityMappingDefaults": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, CEL, EVERYONE.\nCan not be changed after creation.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of values, when NO*VALUE or ALL*OTHER_VALUES are defined, the list has to be empty\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "values"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilter:SecurityPolicyProfileRowLevelSecurityMappingFilter": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria:SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria",
                    "description": "Masking criteria.\n"
                },
                "values": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterValues:SecurityPolicyProfileRowLevelSecurityMappingFilterValues",
                    "description": "A list of values to be applied in this filter. Values are dependent on their type and has to be homogeneous\n"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "values"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria:SecurityPolicyProfileRowLevelSecurityMappingFilterCriteria": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Identity condition, for example IS_NOT, IS, etc.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity:SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity",
                    "description": "Identity to apply the rule for.\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "identity"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity:SecurityPolicyProfileRowLevelSecurityMappingFilterCriteriaIdentity": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for identity of type GROUP.\nCan not be changed after creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, CEL, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityMappingFilterValues:SecurityPolicyProfileRowLevelSecurityMappingFilterValues": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, CEL, EVERYONE.\nCan not be changed after creation.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of values, when NO*VALUE or ALL*OTHER_VALUES are defined, the list has to be empty\n"
                }
            },
            "type": "object",
            "required": [
                "type",
                "values"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRule:SecurityPolicyProfileRowLevelSecurityRule": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Is active.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Rule description.\n"
                },
                "filter": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilter:SecurityPolicyProfileRowLevelSecurityRuleFilter",
                    "description": "Filter definition.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Rule id, has to be unique.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "description",
                "filter",
                "id"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilter:SecurityPolicyProfileRowLevelSecurityRuleFilter": {
            "properties": {
                "advanced": {
                    "type": "boolean",
                    "description": "Describes if logic yaml contains complex configuration. Defaults to `true`.\n"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "Datastore ID.\n"
                },
                "locationPrefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix"
                    },
                    "description": "Location to to be included in the rule. The 'location*prefix' field has been deprecated. Please use the 'location' field instead.\n",
                    "deprecationMessage": "The 'location_prefix' field has been deprecated. Please use the 'location' field instead."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocation"
                    },
                    "description": "Location to be included in the rule.\n"
                },
                "logicYaml": {
                    "type": "string",
                    "description": "Conditional rule, for more info see https://satoricyber.com/docs/security-policies/#setting-up-data-filtering.\n"
                }
            },
            "type": "object",
            "required": [
                "datastoreId",
                "logicYaml"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocation": {
            "properties": {
                "athenaLocation": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation",
                    "description": "Location for Athena data store.\n"
                },
                "mongoLocation": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation",
                    "description": "Location for MongoDB data store.\n"
                },
                "mysqlLocation": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation",
                    "description": "Location for MySql and MariaDB data stores.\n"
                },
                "relationalLocation": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation",
                    "description": "Location for a relational data store.\n"
                },
                "s3Location": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location",
                    "description": "Location for S3 data store.\n"
                }
            },
            "type": "object"
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationAthenaLocation": {
            "properties": {
                "catalog": {
                    "type": "string",
                    "description": "Catalog name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "catalog"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMongoLocation": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "Collection name.\n"
                },
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationMysqlLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationPrefix": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationRelationalLocation": {
            "properties": {
                "db": {
                    "type": "string",
                    "description": "Database name.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "Schema name.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Table name.\n"
                }
            },
            "type": "object",
            "required": [
                "db"
            ]
        },
        "satori:index/SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location:SecurityPolicyProfileRowLevelSecurityRuleFilterLocationS3Location": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Bucket name.\n"
                },
                "objectKey": {
                    "type": "string",
                    "description": "Object Key name.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ]
        },
        "satori:index/SelfServiceAccessRuleExpireIn:SelfServiceAccessRuleExpireIn": {
            "properties": {
                "unitType": {
                    "type": "string",
                    "description": "Unit type for units field, possible values are: MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS.\n"
                },
                "units": {
                    "type": "integer",
                    "description": "Number of units of unit_type.\n"
                }
            },
            "type": "object",
            "required": [
                "unitType",
                "units"
            ]
        },
        "satori:index/SelfServiceAccessRuleIdentity:SelfServiceAccessRuleIdentity": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Directory group ID for identity of type GROUP.\nCan not be changed after creation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP.\nCan not be changed after creation.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Identity type, valid types are: USER, DB*USER, IDP*GROUP, GROUP, DATABRICKS*GROUP, DATABRICKS*SERVICE*PRINCIPAL, SNOWFLAKE*ROLE, EVERYONE.\nCan not be changed after creation.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the satori package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "satoriAccount": {
                "type": "string",
                "description": "Your Satori account ID.\n"
            },
            "serviceAccount": {
                "type": "string",
                "description": "Service account ID with administrative privileges. Can be specified with the `SATORI_SA` environment variable.\n"
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key. Can be specified with the `SATORI_SA_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string"
            },
            "verifyTls": {
                "type": "boolean"
            }
        },
        "required": [
            "satoriAccount"
        ],
        "inputProperties": {
            "satoriAccount": {
                "type": "string",
                "description": "Your Satori account ID.\n"
            },
            "serviceAccount": {
                "type": "string",
                "description": "Service account ID with administrative privileges. Can be specified with the `SATORI_SA` environment variable.\n"
            },
            "serviceAccountKey": {
                "type": "string",
                "description": "Service account key. Can be specified with the `SATORI_SA_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "default": "https://app.satoricyber.com",
                "defaultInfo": {
                    "environment": [
                        "SATORI_URL"
                    ]
                }
            },
            "verifyTls": {
                "type": "boolean"
            }
        },
        "requiredInputs": [
            "satoriAccount"
        ]
    },
    "resources": {
        "satori:index/accessRule:AccessRule": {
            "description": "The **satori_access_rule** resource allows defining dataset access rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst perm1Dataset1 = new satori.AccessRule(\"perm1Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"OWNER\",\n    identity: {\n        type: \"USER\",\n        name: \"test-user\",\n    },\n    expireOn: \"2021-09-01T23:00:00Z\",\n    revokeIfNotUsedInDays: 90,\n});\nconst perm2Dataset1 = new satori.AccessRule(\"perm2Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"GROUP\",\n        groupId: satori_directory_group.group1.id,\n    },\n    expireOn: \"2021-09-01T23:00:00Z\",\n    revokeIfNotUsedInDays: 90,\n    securityPolicies: [],\n});\nconst perm3Dataset1 = new satori.AccessRule(\"perm3Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_WRITE\",\n    identity: {\n        type: \"IDP_GROUP\",\n        name: \"groupName\",\n    },\n    securityPolicies: [\"none\"],\n    enabled: false,\n});\nconst perm1DatasetDefinition1 = new satori.AccessRule(\"perm1DatasetDefinition1\", {\n    parentDataPolicy: satori_dataset.dataset_definition1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"EVERYONE\",\n    },\n    securityPolicies: [\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"],\n});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\nperm1_dataset1 = satori.AccessRule(\"perm1Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"OWNER\",\n    identity=satori.AccessRuleIdentityArgs(\n        type=\"USER\",\n        name=\"test-user\",\n    ),\n    expire_on=\"2021-09-01T23:00:00Z\",\n    revoke_if_not_used_in_days=90)\nperm2_dataset1 = satori.AccessRule(\"perm2Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.AccessRuleIdentityArgs(\n        type=\"GROUP\",\n        group_id=satori_directory_group[\"group1\"][\"id\"],\n    ),\n    expire_on=\"2021-09-01T23:00:00Z\",\n    revoke_if_not_used_in_days=90,\n    security_policies=[])\nperm3_dataset1 = satori.AccessRule(\"perm3Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_WRITE\",\n    identity=satori.AccessRuleIdentityArgs(\n        type=\"IDP_GROUP\",\n        name=\"groupName\",\n    ),\n    security_policies=[\"none\"],\n    enabled=False)\nperm1_dataset_definition1 = satori.AccessRule(\"perm1DatasetDefinition1\",\n    parent_data_policy=satori_dataset[\"dataset_definition1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.AccessRuleIdentityArgs(\n        type=\"EVERYONE\",\n    ),\n    security_policies=[\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var perm1Dataset1 = new Satori.AccessRule(\"perm1Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"OWNER\",\n        Identity = new Satori.Inputs.AccessRuleIdentityArgs\n        {\n            Type = \"USER\",\n            Name = \"test-user\",\n        },\n        ExpireOn = \"2021-09-01T23:00:00Z\",\n        RevokeIfNotUsedInDays = 90,\n    });\n\n    var perm2Dataset1 = new Satori.AccessRule(\"perm2Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.AccessRuleIdentityArgs\n        {\n            Type = \"GROUP\",\n            GroupId = satori_directory_group.Group1.Id,\n        },\n        ExpireOn = \"2021-09-01T23:00:00Z\",\n        RevokeIfNotUsedInDays = 90,\n        SecurityPolicies = new[] {},\n    });\n\n    var perm3Dataset1 = new Satori.AccessRule(\"perm3Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_WRITE\",\n        Identity = new Satori.Inputs.AccessRuleIdentityArgs\n        {\n            Type = \"IDP_GROUP\",\n            Name = \"groupName\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"none\",\n        },\n        Enabled = false,\n    });\n\n    var perm1DatasetDefinition1 = new Satori.AccessRule(\"perm1DatasetDefinition1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset_definition1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.AccessRuleIdentityArgs\n        {\n            Type = \"EVERYONE\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"8c4745f5-a21e-4b7a-bb21-83c54351539f\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := satori.NewAccessRule(ctx, \"perm1Dataset1\", \u0026satori.AccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"OWNER\"),\n\t\t\tIdentity: \u0026satori.AccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"USER\"),\n\t\t\t\tName: pulumi.String(\"test-user\"),\n\t\t\t},\n\t\t\tExpireOn:              pulumi.String(\"2021-09-01T23:00:00Z\"),\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewAccessRule(ctx, \"perm2Dataset1\", \u0026satori.AccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.AccessRuleIdentityArgs{\n\t\t\t\tType:    pulumi.String(\"GROUP\"),\n\t\t\t\tGroupId: pulumi.Any(satori_directory_group.Group1.Id),\n\t\t\t},\n\t\t\tExpireOn:              pulumi.String(\"2021-09-01T23:00:00Z\"),\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t\tSecurityPolicies:      pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewAccessRule(ctx, \"perm3Dataset1\", \u0026satori.AccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_WRITE\"),\n\t\t\tIdentity: \u0026satori.AccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"IDP_GROUP\"),\n\t\t\t\tName: pulumi.String(\"groupName\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"none\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewAccessRule(ctx, \"perm1DatasetDefinition1\", \u0026satori.AccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset_definition1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.AccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"EVERYONE\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.AccessRule;\nimport com.pulumi.satori.AccessRuleArgs;\nimport com.pulumi.satori.inputs.AccessRuleIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var perm1Dataset1 = new AccessRule(\"perm1Dataset1\", AccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"OWNER\")\n            .identity(AccessRuleIdentityArgs.builder()\n                .type(\"USER\")\n                .name(\"test-user\")\n                .build())\n            .expireOn(\"2021-09-01T23:00:00Z\")\n            .revokeIfNotUsedInDays(90)\n            .build());\n\n        var perm2Dataset1 = new AccessRule(\"perm2Dataset1\", AccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(AccessRuleIdentityArgs.builder()\n                .type(\"GROUP\")\n                .groupId(satori_directory_group.group1().id())\n                .build())\n            .expireOn(\"2021-09-01T23:00:00Z\")\n            .revokeIfNotUsedInDays(90)\n            .securityPolicies()\n            .build());\n\n        var perm3Dataset1 = new AccessRule(\"perm3Dataset1\", AccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_WRITE\")\n            .identity(AccessRuleIdentityArgs.builder()\n                .type(\"IDP_GROUP\")\n                .name(\"groupName\")\n                .build())\n            .securityPolicies(\"none\")\n            .enabled(false)\n            .build());\n\n        var perm1DatasetDefinition1 = new AccessRule(\"perm1DatasetDefinition1\", AccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset_definition1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(AccessRuleIdentityArgs.builder()\n                .type(\"EVERYONE\")\n                .build())\n            .securityPolicies(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  perm1Dataset1:\n    type: satori:AccessRule\n    properties:\n      # reference to owning dataset\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      # granted access level, OWNER, READ_WRITE, READ_ONLY\n      accessLevel: OWNER\n      identity:\n        type: USER\n        name: test-user\n      # expire on must be in UTC\n      expireOn: 2021-09-01T23:00:00Z\n      revokeIfNotUsedInDays: 90\n  perm2Dataset1:\n    type: satori:AccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: GROUP\n        groupId: ${satori_directory_group.group1.id}\n      # must be in UTC\n      expireOn: 2021-09-01T23:00:00Z\n      revokeIfNotUsedInDays: 90\n      # dataset default security policies\n      securityPolicies: []\n  perm3Dataset1:\n    type: satori:AccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_WRITE\n      identity:\n        type: IDP_GROUP\n        name: groupName\n      # no security policies\n      securityPolicies:\n        - none\n      # suspend this rule\n      enabled: false\n  perm1DatasetDefinition1:\n    type: satori:AccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset_definition1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: EVERYONE\n      # specific security policies\n      securityPolicies:\n        - 8c4745f5-a21e-4b7a-bb21-83c54351539f\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireOn": {
                    "type": "string",
                    "description": "Expire the rule on the given date and time. RFC3339 date format is expected. Time must be in UTC (i.e. YYYY-MM-DD***T***HH:MM:SS***Z***). Empty value = never expire.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/AccessRuleIdentity:AccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "required": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireOn": {
                    "type": "string",
                    "description": "Expire the rule on the given date and time. RFC3339 date format is expected. Time must be in UTC (i.e. YYYY-MM-DD***T***HH:MM:SS***Z***). Empty value = never expire.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/AccessRuleIdentity:AccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessRule resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the rule. Defaults to `true`.\n"
                    },
                    "expireOn": {
                        "type": "string",
                        "description": "Expire the rule on the given date and time. RFC3339 date format is expected. Time must be in UTC (i.e. YYYY-MM-DD***T***HH:MM:SS***Z***). Empty value = never expire.\n"
                    },
                    "identity": {
                        "$ref": "#/types/satori:index/AccessRuleIdentity:AccessRuleIdentity",
                        "description": "Identity to apply the rule for.\n"
                    },
                    "parentDataPolicy": {
                        "type": "string",
                        "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                    },
                    "revokeIfNotUsedInDays": {
                        "type": "integer",
                        "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                    },
                    "securityPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/customTaxonomyCategory:CustomTaxonomyCategory": {
            "description": "The **satori_custom_taxonomy_category** resource allows defining custom taxonomy categories.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst cat1 = new satori.CustomTaxonomyCategory(\"cat1\", {color: \"#808080\"});\nconst cat2 = new satori.CustomTaxonomyCategory(\"cat2\", {\n    description: \"category from terraform\",\n    color: \"#000000\",\n    parentCategory: cat1.id,\n});\nconst cls1 = new satori.CustomTaxonomyClassifier(\"cls1\", {\n    description: \"classifier from terraform\",\n    type: \"NON_AUTOMATIC\",\n    parentCategory: cat1.id,\n    additionalSatoriCategories: [\"pii\"],\n});\nconst cls2 = new satori.CustomTaxonomyClassifier(\"cls2\", {\n    description: \"classifier from terraform\",\n    type: \"SATORI_BASED\",\n    parentCategory: cat1.id,\n    satoriBasedConfig: {\n        satoriBaseClassifier: \"EMAIL\",\n    },\n    scope: {\n        datasets: [satori_dataset.dataset1.id],\n        includeLocations: [{\n            datastore: satori_datastore.datastore0.id,\n            location: {\n                relationalLocation: {\n                    db: \"db1\",\n                },\n            },\n        }],\n    },\n});\nconst cls3 = new satori.CustomTaxonomyClassifier(\"cls3\", {\n    type: \"CUSTOM\",\n    parentCategory: cat1.id,\n    customConfig: {\n        fieldNamePattern: \"abc.*xyz\",\n        fieldType: \"ANY\",\n    },\n});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\ncat1 = satori.CustomTaxonomyCategory(\"cat1\", color=\"#808080\")\ncat2 = satori.CustomTaxonomyCategory(\"cat2\",\n    description=\"category from terraform\",\n    color=\"#000000\",\n    parent_category=cat1.id)\ncls1 = satori.CustomTaxonomyClassifier(\"cls1\",\n    description=\"classifier from terraform\",\n    type=\"NON_AUTOMATIC\",\n    parent_category=cat1.id,\n    additional_satori_categories=[\"pii\"])\ncls2 = satori.CustomTaxonomyClassifier(\"cls2\",\n    description=\"classifier from terraform\",\n    type=\"SATORI_BASED\",\n    parent_category=cat1.id,\n    satori_based_config=satori.CustomTaxonomyClassifierSatoriBasedConfigArgs(\n        satori_base_classifier=\"EMAIL\",\n    ),\n    scope=satori.CustomTaxonomyClassifierScopeArgs(\n        datasets=[satori_dataset[\"dataset1\"][\"id\"]],\n        include_locations=[satori.CustomTaxonomyClassifierScopeIncludeLocationArgs(\n            datastore=satori_datastore[\"datastore0\"][\"id\"],\n            location=satori.CustomTaxonomyClassifierScopeIncludeLocationLocationArgs(\n                relational_location=satori.CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocationArgs(\n                    db=\"db1\",\n                ),\n            ),\n        )],\n    ))\ncls3 = satori.CustomTaxonomyClassifier(\"cls3\",\n    type=\"CUSTOM\",\n    parent_category=cat1.id,\n    custom_config=satori.CustomTaxonomyClassifierCustomConfigArgs(\n        field_name_pattern=\"abc.*xyz\",\n        field_type=\"ANY\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cat1 = new Satori.CustomTaxonomyCategory(\"cat1\", new()\n    {\n        Color = \"#808080\",\n    });\n\n    var cat2 = new Satori.CustomTaxonomyCategory(\"cat2\", new()\n    {\n        Description = \"category from terraform\",\n        Color = \"#000000\",\n        ParentCategory = cat1.Id,\n    });\n\n    var cls1 = new Satori.CustomTaxonomyClassifier(\"cls1\", new()\n    {\n        Description = \"classifier from terraform\",\n        Type = \"NON_AUTOMATIC\",\n        ParentCategory = cat1.Id,\n        AdditionalSatoriCategories = new[]\n        {\n            \"pii\",\n        },\n    });\n\n    var cls2 = new Satori.CustomTaxonomyClassifier(\"cls2\", new()\n    {\n        Description = \"classifier from terraform\",\n        Type = \"SATORI_BASED\",\n        ParentCategory = cat1.Id,\n        SatoriBasedConfig = new Satori.Inputs.CustomTaxonomyClassifierSatoriBasedConfigArgs\n        {\n            SatoriBaseClassifier = \"EMAIL\",\n        },\n        Scope = new Satori.Inputs.CustomTaxonomyClassifierScopeArgs\n        {\n            Datasets = new[]\n            {\n                satori_dataset.Dataset1.Id,\n            },\n            IncludeLocations = new[]\n            {\n                new Satori.Inputs.CustomTaxonomyClassifierScopeIncludeLocationArgs\n                {\n                    Datastore = satori_datastore.Datastore0.Id,\n                    Location = new Satori.Inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationArgs\n                    {\n                        RelationalLocation = new Satori.Inputs.CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocationArgs\n                        {\n                            Db = \"db1\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    var cls3 = new Satori.CustomTaxonomyClassifier(\"cls3\", new()\n    {\n        Type = \"CUSTOM\",\n        ParentCategory = cat1.Id,\n        CustomConfig = new Satori.Inputs.CustomTaxonomyClassifierCustomConfigArgs\n        {\n            FieldNamePattern = \"abc.*xyz\",\n            FieldType = \"ANY\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcat1, err := satori.NewCustomTaxonomyCategory(ctx, \"cat1\", \u0026satori.CustomTaxonomyCategoryArgs{\n\t\t\tColor: pulumi.String(\"#808080\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewCustomTaxonomyCategory(ctx, \"cat2\", \u0026satori.CustomTaxonomyCategoryArgs{\n\t\t\tDescription:    pulumi.String(\"category from terraform\"),\n\t\t\tColor:          pulumi.String(\"#000000\"),\n\t\t\tParentCategory: cat1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewCustomTaxonomyClassifier(ctx, \"cls1\", \u0026satori.CustomTaxonomyClassifierArgs{\n\t\t\tDescription:    pulumi.String(\"classifier from terraform\"),\n\t\t\tType:           pulumi.String(\"NON_AUTOMATIC\"),\n\t\t\tParentCategory: cat1.ID(),\n\t\t\tAdditionalSatoriCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"pii\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewCustomTaxonomyClassifier(ctx, \"cls2\", \u0026satori.CustomTaxonomyClassifierArgs{\n\t\t\tDescription:    pulumi.String(\"classifier from terraform\"),\n\t\t\tType:           pulumi.String(\"SATORI_BASED\"),\n\t\t\tParentCategory: cat1.ID(),\n\t\t\tSatoriBasedConfig: \u0026satori.CustomTaxonomyClassifierSatoriBasedConfigArgs{\n\t\t\t\tSatoriBaseClassifier: pulumi.String(\"EMAIL\"),\n\t\t\t},\n\t\t\tScope: \u0026satori.CustomTaxonomyClassifierScopeArgs{\n\t\t\t\tDatasets: pulumi.StringArray{\n\t\t\t\t\tsatori_dataset.Dataset1.Id,\n\t\t\t\t},\n\t\t\t\tIncludeLocations: satori.CustomTaxonomyClassifierScopeIncludeLocationArray{\n\t\t\t\t\t\u0026satori.CustomTaxonomyClassifierScopeIncludeLocationArgs{\n\t\t\t\t\t\tDatastore: pulumi.Any(satori_datastore.Datastore0.Id),\n\t\t\t\t\t\tLocation: \u0026satori.CustomTaxonomyClassifierScopeIncludeLocationLocationArgs{\n\t\t\t\t\t\t\tRelationalLocation: \u0026satori.CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocationArgs{\n\t\t\t\t\t\t\t\tDb: pulumi.String(\"db1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewCustomTaxonomyClassifier(ctx, \"cls3\", \u0026satori.CustomTaxonomyClassifierArgs{\n\t\t\tType:           pulumi.String(\"CUSTOM\"),\n\t\t\tParentCategory: cat1.ID(),\n\t\t\tCustomConfig: \u0026satori.CustomTaxonomyClassifierCustomConfigArgs{\n\t\t\t\tFieldNamePattern: pulumi.String(\"abc.*xyz\"),\n\t\t\t\tFieldType:        pulumi.String(\"ANY\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.CustomTaxonomyCategory;\nimport com.pulumi.satori.CustomTaxonomyCategoryArgs;\nimport com.pulumi.satori.CustomTaxonomyClassifier;\nimport com.pulumi.satori.CustomTaxonomyClassifierArgs;\nimport com.pulumi.satori.inputs.CustomTaxonomyClassifierSatoriBasedConfigArgs;\nimport com.pulumi.satori.inputs.CustomTaxonomyClassifierScopeArgs;\nimport com.pulumi.satori.inputs.CustomTaxonomyClassifierCustomConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cat1 = new CustomTaxonomyCategory(\"cat1\", CustomTaxonomyCategoryArgs.builder()        \n            .color(\"#808080\")\n            .build());\n\n        var cat2 = new CustomTaxonomyCategory(\"cat2\", CustomTaxonomyCategoryArgs.builder()        \n            .description(\"category from terraform\")\n            .color(\"#000000\")\n            .parentCategory(cat1.id())\n            .build());\n\n        var cls1 = new CustomTaxonomyClassifier(\"cls1\", CustomTaxonomyClassifierArgs.builder()        \n            .description(\"classifier from terraform\")\n            .type(\"NON_AUTOMATIC\")\n            .parentCategory(cat1.id())\n            .additionalSatoriCategories(\"pii\")\n            .build());\n\n        var cls2 = new CustomTaxonomyClassifier(\"cls2\", CustomTaxonomyClassifierArgs.builder()        \n            .description(\"classifier from terraform\")\n            .type(\"SATORI_BASED\")\n            .parentCategory(cat1.id())\n            .satoriBasedConfig(CustomTaxonomyClassifierSatoriBasedConfigArgs.builder()\n                .satoriBaseClassifier(\"EMAIL\")\n                .build())\n            .scope(CustomTaxonomyClassifierScopeArgs.builder()\n                .datasets(satori_dataset.dataset1().id())\n                .includeLocations(CustomTaxonomyClassifierScopeIncludeLocationArgs.builder()\n                    .datastore(satori_datastore.datastore0().id())\n                    .location(CustomTaxonomyClassifierScopeIncludeLocationLocationArgs.builder()\n                        .relationalLocation(CustomTaxonomyClassifierScopeIncludeLocationLocationRelationalLocationArgs.builder()\n                            .db(\"db1\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var cls3 = new CustomTaxonomyClassifier(\"cls3\", CustomTaxonomyClassifierArgs.builder()        \n            .type(\"CUSTOM\")\n            .parentCategory(cat1.id())\n            .customConfig(CustomTaxonomyClassifierCustomConfigArgs.builder()\n                .fieldNamePattern(\"abc.*xyz\")\n                .fieldType(\"ANY\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cat1:\n    type: satori:CustomTaxonomyCategory\n    properties:\n      color: '#808080'\n  cat2:\n    type: satori:CustomTaxonomyCategory\n    properties:\n      description: category from terraform\n      color: '#000000'\n      parentCategory: ${cat1.id}\n  cls1:\n    type: satori:CustomTaxonomyClassifier\n    properties:\n      description: classifier from terraform\n      type: NON_AUTOMATIC\n      parentCategory: ${cat1.id}\n      additionalSatoriCategories:\n        - pii\n  cls2:\n    type: satori:CustomTaxonomyClassifier\n    properties:\n      description: classifier from terraform\n      type: SATORI_BASED\n      parentCategory: ${cat1.id}\n      satoriBasedConfig:\n        satoriBaseClassifier: EMAIL\n      scope:\n        datasets:\n          - ${satori_dataset.dataset1.id}\n        includeLocations:\n          - datastore: ${satori_datastore.datastore0.id}\n            location:\n              relationalLocation:\n                db: db1\n  cls3:\n    type: satori:CustomTaxonomyClassifier\n    properties:\n      type: CUSTOM\n      parentCategory: ${cat1.id}\n      customConfig:\n        fieldNamePattern: abc.*xyz\n        fieldType: ANY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Category color.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Category description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Category name.\n"
                },
                "parentCategory": {
                    "type": "string",
                    "description": "Parent category ID.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Category tag.\n"
                }
            },
            "required": [
                "color",
                "name",
                "tag"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Category color.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Category description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Category name.\n"
                },
                "parentCategory": {
                    "type": "string",
                    "description": "Parent category ID.\n"
                }
            },
            "requiredInputs": [
                "color"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomTaxonomyCategory resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Category color.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Category description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Category name.\n"
                    },
                    "parentCategory": {
                        "type": "string",
                        "description": "Parent category ID.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Category tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/customTaxonomyClassifier:CustomTaxonomyClassifier": {
            "description": "Custom taxonomy classifier.\n",
            "properties": {
                "additionalSatoriCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional Satori taxonomy category IDs.\nSee https://satoricyber.com/docs/taxonomy/standard-categories for a list of possible values.\n"
                },
                "customConfig": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierCustomConfig:CustomTaxonomyClassifierCustomConfig",
                    "description": "Configuration for CUSTOM classifier type.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Classifier description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Classifier name.\n"
                },
                "parentCategory": {
                    "type": "string",
                    "description": "Parent category ID.\n"
                },
                "satoriBasedConfig": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierSatoriBasedConfig:CustomTaxonomyClassifierSatoriBasedConfig",
                    "description": "Configuration for SATORI*BASED classifier type.\n"
                },
                "scope": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScope:CustomTaxonomyClassifierScope",
                    "description": "Scope of relevant locations.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Classifier tag.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Classifier type, valid types are: NON*AUTOMATIC, CUSTOM, SATORI*BASED.\n"
                }
            },
            "required": [
                "name",
                "tag",
                "type"
            ],
            "inputProperties": {
                "additionalSatoriCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional Satori taxonomy category IDs.\nSee https://satoricyber.com/docs/taxonomy/standard-categories for a list of possible values.\n"
                },
                "customConfig": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierCustomConfig:CustomTaxonomyClassifierCustomConfig",
                    "description": "Configuration for CUSTOM classifier type.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Classifier description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Classifier name.\n"
                },
                "parentCategory": {
                    "type": "string",
                    "description": "Parent category ID.\n"
                },
                "satoriBasedConfig": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierSatoriBasedConfig:CustomTaxonomyClassifierSatoriBasedConfig",
                    "description": "Configuration for SATORI*BASED classifier type.\n"
                },
                "scope": {
                    "$ref": "#/types/satori:index/CustomTaxonomyClassifierScope:CustomTaxonomyClassifierScope",
                    "description": "Scope of relevant locations.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Classifier type, valid types are: NON*AUTOMATIC, CUSTOM, SATORI*BASED.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomTaxonomyClassifier resources.\n",
                "properties": {
                    "additionalSatoriCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of additional Satori taxonomy category IDs.\nSee https://satoricyber.com/docs/taxonomy/standard-categories for a list of possible values.\n"
                    },
                    "customConfig": {
                        "$ref": "#/types/satori:index/CustomTaxonomyClassifierCustomConfig:CustomTaxonomyClassifierCustomConfig",
                        "description": "Configuration for CUSTOM classifier type.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Classifier description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Classifier name.\n"
                    },
                    "parentCategory": {
                        "type": "string",
                        "description": "Parent category ID.\n"
                    },
                    "satoriBasedConfig": {
                        "$ref": "#/types/satori:index/CustomTaxonomyClassifierSatoriBasedConfig:CustomTaxonomyClassifierSatoriBasedConfig",
                        "description": "Configuration for SATORI*BASED classifier type.\n"
                    },
                    "scope": {
                        "$ref": "#/types/satori:index/CustomTaxonomyClassifierScope:CustomTaxonomyClassifierScope",
                        "description": "Scope of relevant locations.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Classifier tag.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Classifier type, valid types are: NON*AUTOMATIC, CUSTOM, SATORI*BASED.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/dataset:Dataset": {
            "description": "Datasets are collections of data store locations that are meant to be governed as a single unit.\nThe **satori_dataset** resource allows defining datasets.\n\n\u003cbr /\u003e\n\u003cbr /\u003e\nThe resource output includes **data_policy_id** which is mandatory ID for future access rule resources creation.\nSee Read-Only section and **satori_request_access_rule** Resource examples.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SatoriFunctions;\nimport com.pulumi.satori.inputs.GetUserArgs;\nimport com.pulumi.satori.Dataset;\nimport com.pulumi.satori.DatasetArgs;\nimport com.pulumi.satori.inputs.DatasetDefinitionArgs;\nimport com.pulumi.satori.inputs.DatasetAccessControlSettingsArgs;\nimport com.pulumi.satori.inputs.DatasetCustomPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataSteward1 = SatoriFunctions.getUser(GetUserArgs.builder()\n            .email(\"data-steward@acme.organization\")\n            .build());\n\n        var dataset1 = new Dataset(\"dataset1\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .approvers(                \n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"GROUP\")\n                        .id(\"788680b7-461d-493a-a3d6-86e71fd01ff2\")\n                        .build(),\n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"USER\")\n                        .id(\"3d174db4-4526-4469-2fda-46d0dd2a7f7d\")\n                        .build(),\n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"USER\")\n                        .id(dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .build())\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db2\")\n                                .schema(\"schema1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db2\")\n                                .schema(\"schema2\")\n                                .table(\"table\")\n                                .build())\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .location(DatasetDefinitionExcludeLocationLocationArgs.builder()\n                        .relationalLocation(DatasetDefinitionExcludeLocationLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema1\")\n                            .table(\"tableX\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n        // Example with different location types\n        var dataset2 = new Dataset(\"dataset2\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db1\")\n                                .schema(\"schema1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"3go33ff5-95cf-474f-a1d6-d5084810dd5k\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .mongoLocation(DatasetDefinitionIncludeLocationLocationMongoLocationArgs.builder()\n                                .db(\"db1\")\n                                .collection(\"collection1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"8kl43ff5-95cf-474f-a1d6-d508481049lw\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .s3Location(DatasetDefinitionIncludeLocationLocationS3LocationArgs.builder()\n                                .bucket(\"bucket1\")\n                                .objectKey(\"a/b/c\")\n                                .build())\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .location(DatasetDefinitionExcludeLocationLocationArgs.builder()\n                        .relationalLocation(DatasetDefinitionExcludeLocationLocationRelationalLocationArgs.builder()\n                            .db(\"db1\")\n                            .schema(\"schema1\")\n                            .table(\"tableX\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n        // Example with deprecated usage of relational_location field\n        var dataset3 = new Dataset(\"dataset3\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db1\")\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema1\")\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema2\")\n                            .table(\"table\")\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .relationalLocation(DatasetDefinitionExcludeLocationRelationalLocationArgs.builder()\n                        .db(\"db2\")\n                        .schema(\"schema1\")\n                        .table(\"tableX\")\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dataset1:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        approvers:\n          - type: GROUP\n            id: 788680b7-461d-493a-a3d6-86e71fd01ff2\n          - type: USER\n            id: 3d174db4-4526-4469-2fda-46d0dd2a7f7d\n          - type: USER\n            id: ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema2\n                table: table\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema1\n                table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\n  # Example with different location types\n  dataset2:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n                schema: schema1\n          - datastore: 3go33ff5-95cf-474f-a1d6-d5084810dd5k\n            location:\n              mongoLocation:\n                db: db1\n                collection: collection1\n          - datastore: 8kl43ff5-95cf-474f-a1d6-d508481049lw\n            location:\n              s3Location:\n                bucket: bucket1\n                objectKey: a/b/c\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n                schema: schema1\n                table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\n  # Example with deprecated usage of relational_location field\n  dataset3:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema2\n              table: table\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema1\n              table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\nvariables:\n  dataSteward1:\n    fn::invoke:\n      Function: satori:getUser\n      Arguments:\n        email: data-steward@acme.organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessControlSettings": {
                    "$ref": "#/types/satori:index/DatasetAccessControlSettings:DatasetAccessControlSettings",
                    "description": "Dataset access controls.\n"
                },
                "customPolicy": {
                    "$ref": "#/types/satori:index/DatasetCustomPolicy:DatasetCustomPolicy",
                    "description": "Dataset custom policy.\n"
                },
                "dataPolicyId": {
                    "type": "string",
                    "description": "Parent ID for dataset permissions.\n"
                },
                "definition": {
                    "$ref": "#/types/satori:index/DatasetDefinition:DatasetDefinition",
                    "description": "Parameters for dataset definition.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this dataset.\n"
                }
            },
            "required": [
                "accessControlSettings",
                "dataPolicyId",
                "definition"
            ],
            "inputProperties": {
                "accessControlSettings": {
                    "$ref": "#/types/satori:index/DatasetAccessControlSettings:DatasetAccessControlSettings",
                    "description": "Dataset access controls.\n"
                },
                "customPolicy": {
                    "$ref": "#/types/satori:index/DatasetCustomPolicy:DatasetCustomPolicy",
                    "description": "Dataset custom policy.\n"
                },
                "definition": {
                    "$ref": "#/types/satori:index/DatasetDefinition:DatasetDefinition",
                    "description": "Parameters for dataset definition.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this dataset.\n"
                }
            },
            "requiredInputs": [
                "accessControlSettings",
                "definition"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dataset resources.\n",
                "properties": {
                    "accessControlSettings": {
                        "$ref": "#/types/satori:index/DatasetAccessControlSettings:DatasetAccessControlSettings",
                        "description": "Dataset access controls.\n"
                    },
                    "customPolicy": {
                        "$ref": "#/types/satori:index/DatasetCustomPolicy:DatasetCustomPolicy",
                        "description": "Dataset custom policy.\n"
                    },
                    "dataPolicyId": {
                        "type": "string",
                        "description": "Parent ID for dataset permissions.\n"
                    },
                    "definition": {
                        "$ref": "#/types/satori:index/DatasetDefinition:DatasetDefinition",
                        "description": "Parameters for dataset definition.\n"
                    },
                    "securityPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of security policies to apply to this dataset.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/datastore:Datastore": {
            "description": "Satori provides the ability to connect to broad range of data stores repositories.\nThe **satori_datastore** resource allows lifecycle management for the datastores.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@pulumi/satori\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\nconst publicDac = satori.getDataAccessController({\n    type: \"PUBLIC\",\n    region: \"\u003cassigned region\u003e\",\n    cloudProvider: \"\u003cassigned cloud provider\u003e\",\n});\nconst privateDac = satori.getDataAccessController({\n    type: \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n    id: \"\u003cassigned id\u003e\",\n});\nconst datastore0 = new satori.Datastore(\"datastore0\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: dataaccessControllerId,\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    baselineSecurityPolicy: {\n        unassociatedQueriesCategory: {\n            queryAction: \"PASS\",\n        },\n        unsupportedQueriesCategory: {\n            queryAction: \"PASS\",\n        },\n        exclusions: {},\n    },\n    networkPolicies: [{}],\n});\nconst datastoreWithIgnorePasswordUpdate = new satori.Datastore(\"datastoreWithIgnorePasswordUpdate\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    satoriAuthSettings: {\n        enabled: true,\n        credentials: {\n            password: \"*********\",\n            username: \"adminuser\",\n        },\n    },\n    networkPolicies: [{}],\n});\n// Example of creating a datastore with personal access token enabled\n// Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n// The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\nconst datastoreWithPersonalAccessTokenEnabled = new satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    satoriAuthSettings: {\n        enabled: true,\n        credentials: {\n            password: \"*********\",\n            username: \"adminuser\",\n        },\n        enablePersonalAccessToken: true,\n    },\n    networkPolicies: [{}],\n});\nconst datastoreWithPrivateDac = new satori.Datastore(\"datastoreWithPrivateDac\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: privateDac.then(privateDac =\u003e privateDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    networkPolicies: [{}],\n});\nconst mongodbDatastore = new satori.Datastore(\"mongodbDatastore\", {\n    hostname: \"mongo.example.mongodb.net\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"MONGO\",\n    datastoreSettings: [{\n        deploymentType: \"MONGODB_SRV\",\n    }],\n    networkPolicies: [{}],\n});\nexport const datastoreCreatedId = datastore0.id;\n```\n```python\nimport pulumi\nimport pulumi_satori as satori\nimport satori_resources_config as satori\n\ndataaccess_controller_id = \"\u003cassigned dataaccess_controller_id\u003e\"\npublic_dac = satori.get_data_access_controller(type=\"PUBLIC\",\n    region=\"\u003cassigned region\u003e\",\n    cloud_provider=\"\u003cassigned cloud provider\u003e\")\nprivate_dac = satori.get_data_access_controller(type=\"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n    id=\"\u003cassigned id\u003e\")\ndatastore0 = satori.Datastore(\"datastore0\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=dataaccess_controller_id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    baseline_security_policy=satori.DatastoreBaselineSecurityPolicyArgs(\n        unassociated_queries_category=satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs(\n            query_action=\"PASS\",\n        ),\n        unsupported_queries_category=satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs(\n            query_action=\"PASS\",\n        ),\n        exclusions=satori.DatastoreBaselineSecurityPolicyExclusionsArgs(),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\ndatastore_with_ignore_password_update = satori.Datastore(\"datastoreWithIgnorePasswordUpdate\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    satori_auth_settings=satori.DatastoreSatoriAuthSettingsArgs(\n        enabled=True,\n        credentials=satori.DatastoreSatoriAuthSettingsCredentialsArgs(\n            password=\"*********\",\n            username=\"adminuser\",\n        ),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\n# Example of creating a datastore with personal access token enabled\n# Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n# The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\ndatastore_with_personal_access_token_enabled = satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    satori_auth_settings=satori.DatastoreSatoriAuthSettingsArgs(\n        enabled=True,\n        credentials=satori.DatastoreSatoriAuthSettingsCredentialsArgs(\n            password=\"*********\",\n            username=\"adminuser\",\n        ),\n        enable_personal_access_token=True,\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\ndatastore_with_private_dac = satori.Datastore(\"datastoreWithPrivateDac\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=private_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\nmongodb_datastore = satori.Datastore(\"mongodbDatastore\",\n    hostname=\"mongo.example.mongodb.net\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"MONGO\",\n    datastore_settings=[satori.DatastoreDatastoreSettingArgs(\n        deployment_type=\"MONGODB_SRV\",\n    )],\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\npulumi.export(\"datastoreCreatedId\", datastore0.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Pulumi.Satori;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n    var publicDac = Satori.GetDataAccessController.Invoke(new()\n    {\n        Type = \"PUBLIC\",\n        Region = \"\u003cassigned region\u003e\",\n        CloudProvider = \"\u003cassigned cloud provider\u003e\",\n    });\n\n    var privateDac = Satori.GetDataAccessController.Invoke(new()\n    {\n        Type = \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n        Id = \"\u003cassigned id\u003e\",\n    });\n\n    var datastore0 = new Satori.Datastore(\"datastore0\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = dataaccessControllerId,\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        BaselineSecurityPolicy = new Satori.Inputs.DatastoreBaselineSecurityPolicyArgs\n        {\n            UnassociatedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs\n            {\n                QueryAction = \"PASS\",\n            },\n            UnsupportedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs\n            {\n                QueryAction = \"PASS\",\n            },\n            Exclusions = null,\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var datastoreWithIgnorePasswordUpdate = new Satori.Datastore(\"datastoreWithIgnorePasswordUpdate\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        SatoriAuthSettings = new Satori.Inputs.DatastoreSatoriAuthSettingsArgs\n        {\n            Enabled = true,\n            Credentials = new Satori.Inputs.DatastoreSatoriAuthSettingsCredentialsArgs\n            {\n                Password = \"*********\",\n                Username = \"adminuser\",\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    // Example of creating a datastore with personal access token enabled\n    // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n    // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n    var datastoreWithPersonalAccessTokenEnabled = new Satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        SatoriAuthSettings = new Satori.Inputs.DatastoreSatoriAuthSettingsArgs\n        {\n            Enabled = true,\n            Credentials = new Satori.Inputs.DatastoreSatoriAuthSettingsCredentialsArgs\n            {\n                Password = \"*********\",\n                Username = \"adminuser\",\n            },\n            EnablePersonalAccessToken = true,\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var datastoreWithPrivateDac = new Satori.Datastore(\"datastoreWithPrivateDac\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = privateDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var mongodbDatastore = new Satori.Datastore(\"mongodbDatastore\", new()\n    {\n        Hostname = \"mongo.example.mongodb.net\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"MONGO\",\n        DatastoreSettings = new[]\n        {\n            new Satori.Inputs.DatastoreDatastoreSettingArgs\n            {\n                DeploymentType = \"MONGODB_SRV\",\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datastoreCreatedId\"] = datastore0.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataaccessControllerId := \"\u003cassigned dataaccess_controller_id\u003e\"\n\t\tpublicDac, err := satori.GetDataAccessController(ctx, \u0026satori.GetDataAccessControllerArgs{\n\t\t\tType:          \"PUBLIC\",\n\t\t\tRegion:        pulumi.StringRef(\"\u003cassigned region\u003e\"),\n\t\t\tCloudProvider: pulumi.StringRef(\"\u003cassigned cloud provider\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprivateDac, err := satori.GetDataAccessController(ctx, \u0026satori.GetDataAccessControllerArgs{\n\t\t\tType: \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n\t\t\tId:   pulumi.StringRef(\"\u003cassigned id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatastore0, err := satori.NewDatastore(ctx, \"datastore0\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(dataaccessControllerId),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tBaselineSecurityPolicy: \u0026satori.DatastoreBaselineSecurityPolicyArgs{\n\t\t\t\tUnassociatedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"PASS\"),\n\t\t\t\t},\n\t\t\t\tUnsupportedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"PASS\"),\n\t\t\t\t},\n\t\t\t\tExclusions: nil,\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithIgnorePasswordUpdate\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tSatoriAuthSettings: \u0026satori.DatastoreSatoriAuthSettingsArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tCredentials: \u0026satori.DatastoreSatoriAuthSettingsCredentialsArgs{\n\t\t\t\t\tPassword: pulumi.String(\"*********\"),\n\t\t\t\t\tUsername: pulumi.String(\"adminuser\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example of creating a datastore with personal access token enabled\n\t\t// Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n\t\t// The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithPersonalAccessTokenEnabled\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tSatoriAuthSettings: \u0026satori.DatastoreSatoriAuthSettingsArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tCredentials: \u0026satori.DatastoreSatoriAuthSettingsCredentialsArgs{\n\t\t\t\t\tPassword: pulumi.String(\"*********\"),\n\t\t\t\t\tUsername: pulumi.String(\"adminuser\"),\n\t\t\t\t},\n\t\t\t\tEnablePersonalAccessToken: pulumi.Bool(true),\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithPrivateDac\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(privateDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"mongodbDatastore\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"mongo.example.mongodb.net\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"MONGO\"),\n\t\t\tDatastoreSettings: satori.DatastoreDatastoreSettingArray{\n\t\t\t\t\u0026satori.DatastoreDatastoreSettingArgs{\n\t\t\t\t\tDeploymentType: pulumi.String(\"MONGODB_SRV\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datastoreCreatedId\", datastore0.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SatoriFunctions;\nimport com.pulumi.satori.inputs.GetDataAccessControllerArgs;\nimport com.pulumi.satori.Datastore;\nimport com.pulumi.satori.DatastoreArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyExclusionsArgs;\nimport com.pulumi.satori.inputs.DatastoreNetworkPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsCredentialsArgs;\nimport com.pulumi.satori.inputs.DatastoreDatastoreSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n        final var publicDac = SatoriFunctions.getDataAccessController(GetDataAccessControllerArgs.builder()\n            .type(\"PUBLIC\")\n            .region(\"\u003cassigned region\u003e\")\n            .cloudProvider(\"\u003cassigned cloud provider\u003e\")\n            .build());\n\n        final var privateDac = SatoriFunctions.getDataAccessController(GetDataAccessControllerArgs.builder()\n            .type(\"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\")\n            .id(\"\u003cassigned id\u003e\")\n            .build());\n\n        var datastore0 = new Datastore(\"datastore0\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(dataaccessControllerId)\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .baselineSecurityPolicy(DatastoreBaselineSecurityPolicyArgs.builder()\n                .unassociatedQueriesCategory(DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs.builder()\n                    .queryAction(\"PASS\")\n                    .build())\n                .unsupportedQueriesCategory(DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs.builder()\n                    .queryAction(\"PASS\")\n                    .build())\n                .exclusions()\n                .build())\n            .networkPolicies()\n            .build());\n\n        var datastoreWithIgnorePasswordUpdate = new Datastore(\"datastoreWithIgnorePasswordUpdate\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .satoriAuthSettings(DatastoreSatoriAuthSettingsArgs.builder()\n                .enabled(true)\n                .credentials(DatastoreSatoriAuthSettingsCredentialsArgs.builder()\n                    .password(\"*********\")\n                    .username(\"adminuser\")\n                    .build())\n                .build())\n            .networkPolicies()\n            .build());\n\n        // Example of creating a datastore with personal access token enabled\n        // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n        // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n        var datastoreWithPersonalAccessTokenEnabled = new Datastore(\"datastoreWithPersonalAccessTokenEnabled\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .satoriAuthSettings(DatastoreSatoriAuthSettingsArgs.builder()\n                .enabled(true)\n                .credentials(DatastoreSatoriAuthSettingsCredentialsArgs.builder()\n                    .password(\"*********\")\n                    .username(\"adminuser\")\n                    .build())\n                .enablePersonalAccessToken(true)\n                .build())\n            .networkPolicies()\n            .build());\n\n        var datastoreWithPrivateDac = new Datastore(\"datastoreWithPrivateDac\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(privateDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .networkPolicies()\n            .build());\n\n        var mongodbDatastore = new Datastore(\"mongodbDatastore\", DatastoreArgs.builder()        \n            .hostname(\"mongo.example.mongodb.net\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"MONGO\")\n            .datastoreSettings(DatastoreDatastoreSettingArgs.builder()\n                .deploymentType(\"MONGODB_SRV\")\n                .build())\n            .networkPolicies()\n            .build());\n\n        ctx.export(\"datastoreCreatedId\", datastore0.id());\n    }\n}\n```\n```yaml\nresources:\n  datastore0:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${dataaccessControllerId}\n      type: SNOWFLAKE\n      originPort: 8081\n      baselineSecurityPolicy:\n        unassociatedQueriesCategory:\n          queryAction: PASS\n        unsupportedQueriesCategory:\n          queryAction: PASS\n        exclusions: {}\n      networkPolicies:\n        - {}\n  datastoreWithIgnorePasswordUpdate:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${publicDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      satoriAuthSettings:\n        enabled: true\n        credentials:\n          password: '*********'\n          username: adminuser\n      networkPolicies:\n        - {}\n  # Example of creating a datastore with personal access token enabled\n  # // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n  # // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n  datastoreWithPersonalAccessTokenEnabled:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${publicDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      satoriAuthSettings:\n        enabled: true\n        credentials:\n          password: '*********'\n          username: adminuser\n        enablePersonalAccessToken: true\n      networkPolicies:\n        - {}\n  datastoreWithPrivateDac:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${privateDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      networkPolicies:\n        - {}\n  mongodbDatastore:\n    type: satori:Datastore\n    properties:\n      hostname: mongo.example.mongodb.net\n      dataaccessControllerId: ${publicDac.id}\n      type: MONGO\n      datastoreSettings:\n        - deploymentType: MONGODB_SRV\n      networkPolicies:\n        - {}\nvariables:\n  dataaccessControllerId: \u003cassigned dataaccess_controller_id\u003e\n  publicDac:\n    fn::invoke:\n      Function: satori:getDataAccessController\n      Arguments:\n        type: PUBLIC\n        region: \u003cassigned region\u003e\n        cloudProvider: \u003cassigned cloud provider\u003e\n  privateDac:\n    fn::invoke:\n      Function: satori:getDataAccessController\n      Arguments:\n        type: \u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\n        id: \u003cassigned id\u003e\noutputs:\n  # output of generated id for newly created datastore\n  datastoreCreatedId: ${datastore0.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\nconst datastore0 = new satori.Datastore(\"datastore0\", {\n    dataaccessControllerId: dataaccessControllerId,\n    type: \"BIGQUERY\",\n    projectIds: [\n        \"abc\",\n        \"cdf\",\n    ],\n    hostname: \"data source target hostname\",\n    originPort: 8081,\n    baselineSecurityPolicy: {\n        unassociatedQueriesCategory: {\n            queryAction: \"REDACT\",\n        },\n        unsupportedQueriesCategory: {\n            queryAction: \"REDACT\",\n        },\n        exclusions: {\n            excludedIdentities: [\n                {\n                    identityType: \"USER\",\n                    identity: \"user1\",\n                },\n                {\n                    identityType: \"USER\",\n                    identity: \"user2\",\n                },\n            ],\n            excludedQueryPatterns: [\n                {\n                    pattern: \".*a.*\",\n                },\n                {\n                    pattern: \".*b.*\",\n                },\n            ],\n        },\n    },\n    networkPolicies: [{\n        allowedRules: [{\n            note: \"desc1\",\n            ipRanges: [\n                {\n                    ipRange: \"1.1.1.0/24\",\n                },\n                {\n                    ipRange: \"3.2.3.1\",\n                },\n            ],\n        }],\n        blockedRules: [{\n            note: \"desc3\",\n            ipRanges: [\n                {\n                    ipRange: \"1.1.1.0/30\",\n                },\n                {\n                    ipRange: \"3.2.3.3\",\n                },\n            ],\n        }],\n    }],\n});\nexport const datastoreCreatedId = datastore0.id;\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\ndataaccess_controller_id = \"\u003cassigned dataaccess_controller_id\u003e\"\ndatastore0 = satori.Datastore(\"datastore0\",\n    dataaccess_controller_id=dataaccess_controller_id,\n    type=\"BIGQUERY\",\n    project_ids=[\n        \"abc\",\n        \"cdf\",\n    ],\n    hostname=\"data source target hostname\",\n    origin_port=8081,\n    baseline_security_policy=satori.DatastoreBaselineSecurityPolicyArgs(\n        unassociated_queries_category=satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs(\n            query_action=\"REDACT\",\n        ),\n        unsupported_queries_category=satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs(\n            query_action=\"REDACT\",\n        ),\n        exclusions=satori.DatastoreBaselineSecurityPolicyExclusionsArgs(\n            excluded_identities=[\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs(\n                    identity_type=\"USER\",\n                    identity=\"user1\",\n                ),\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs(\n                    identity_type=\"USER\",\n                    identity=\"user2\",\n                ),\n            ],\n            excluded_query_patterns=[\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs(\n                    pattern=\".*a.*\",\n                ),\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs(\n                    pattern=\".*b.*\",\n                ),\n            ],\n        ),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs(\n        allowed_rules=[satori.DatastoreNetworkPolicyAllowedRuleArgs(\n            note=\"desc1\",\n            ip_ranges=[\n                satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs(\n                    ip_range=\"1.1.1.0/24\",\n                ),\n                satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs(\n                    ip_range=\"3.2.3.1\",\n                ),\n            ],\n        )],\n        blocked_rules=[satori.DatastoreNetworkPolicyBlockedRuleArgs(\n            note=\"desc3\",\n            ip_ranges=[\n                satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs(\n                    ip_range=\"1.1.1.0/30\",\n                ),\n                satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs(\n                    ip_range=\"3.2.3.3\",\n                ),\n            ],\n        )],\n    )])\npulumi.export(\"datastoreCreatedId\", datastore0.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n    var datastore0 = new Satori.Datastore(\"datastore0\", new()\n    {\n        DataaccessControllerId = dataaccessControllerId,\n        Type = \"BIGQUERY\",\n        ProjectIds = new[]\n        {\n            \"abc\",\n            \"cdf\",\n        },\n        Hostname = \"data source target hostname\",\n        OriginPort = 8081,\n        BaselineSecurityPolicy = new Satori.Inputs.DatastoreBaselineSecurityPolicyArgs\n        {\n            UnassociatedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs\n            {\n                QueryAction = \"REDACT\",\n            },\n            UnsupportedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs\n            {\n                QueryAction = \"REDACT\",\n            },\n            Exclusions = new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsArgs\n            {\n                ExcludedIdentities = new[]\n                {\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs\n                    {\n                        IdentityType = \"USER\",\n                        Identity = \"user1\",\n                    },\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs\n                    {\n                        IdentityType = \"USER\",\n                        Identity = \"user2\",\n                    },\n                },\n                ExcludedQueryPatterns = new[]\n                {\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs\n                    {\n                        Pattern = \".*a.*\",\n                    },\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs\n                    {\n                        Pattern = \".*b.*\",\n                    },\n                },\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            new Satori.Inputs.DatastoreNetworkPolicyArgs\n            {\n                AllowedRules = new[]\n                {\n                    new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleArgs\n                    {\n                        Note = \"desc1\",\n                        IpRanges = new[]\n                        {\n                            new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleIpRangeArgs\n                            {\n                                IpRange = \"1.1.1.0/24\",\n                            },\n                            new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleIpRangeArgs\n                            {\n                                IpRange = \"3.2.3.1\",\n                            },\n                        },\n                    },\n                },\n                BlockedRules = new[]\n                {\n                    new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleArgs\n                    {\n                        Note = \"desc3\",\n                        IpRanges = new[]\n                        {\n                            new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleIpRangeArgs\n                            {\n                                IpRange = \"1.1.1.0/30\",\n                            },\n                            new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleIpRangeArgs\n                            {\n                                IpRange = \"3.2.3.3\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datastoreCreatedId\"] = datastore0.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataaccessControllerId := \"\u003cassigned dataaccess_controller_id\u003e\"\n\t\tdatastore0, err := satori.NewDatastore(ctx, \"datastore0\", \u0026satori.DatastoreArgs{\n\t\t\tDataaccessControllerId: pulumi.String(dataaccessControllerId),\n\t\t\tType:                   pulumi.String(\"BIGQUERY\"),\n\t\t\tProjectIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"abc\"),\n\t\t\t\tpulumi.String(\"cdf\"),\n\t\t\t},\n\t\t\tHostname:   pulumi.String(\"data source target hostname\"),\n\t\t\tOriginPort: pulumi.Int(8081),\n\t\t\tBaselineSecurityPolicy: \u0026satori.DatastoreBaselineSecurityPolicyArgs{\n\t\t\t\tUnassociatedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"REDACT\"),\n\t\t\t\t},\n\t\t\t\tUnsupportedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"REDACT\"),\n\t\t\t\t},\n\t\t\t\tExclusions: \u0026satori.DatastoreBaselineSecurityPolicyExclusionsArgs{\n\t\t\t\t\tExcludedIdentities: satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArray{\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs{\n\t\t\t\t\t\t\tIdentityType: pulumi.String(\"USER\"),\n\t\t\t\t\t\t\tIdentity:     pulumi.String(\"user1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs{\n\t\t\t\t\t\t\tIdentityType: pulumi.String(\"USER\"),\n\t\t\t\t\t\t\tIdentity:     pulumi.String(\"user2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tExcludedQueryPatterns: satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArray{\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs{\n\t\t\t\t\t\t\tPattern: pulumi.String(\".*a.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs{\n\t\t\t\t\t\t\tPattern: pulumi.String(\".*b.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\t\u0026satori.DatastoreNetworkPolicyArgs{\n\t\t\t\t\tAllowedRules: satori.DatastoreNetworkPolicyAllowedRuleArray{\n\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleArgs{\n\t\t\t\t\t\t\tNote: pulumi.String(\"desc1\"),\n\t\t\t\t\t\t\tIpRanges: satori.DatastoreNetworkPolicyAllowedRuleIpRangeArray{\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"1.1.1.0/24\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"3.2.3.1\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tBlockedRules: satori.DatastoreNetworkPolicyBlockedRuleArray{\n\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleArgs{\n\t\t\t\t\t\t\tNote: pulumi.String(\"desc3\"),\n\t\t\t\t\t\t\tIpRanges: satori.DatastoreNetworkPolicyBlockedRuleIpRangeArray{\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"1.1.1.0/30\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"3.2.3.3\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datastoreCreatedId\", datastore0.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.Datastore;\nimport com.pulumi.satori.DatastoreArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyExclusionsArgs;\nimport com.pulumi.satori.inputs.DatastoreNetworkPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n        var datastore0 = new Datastore(\"datastore0\", DatastoreArgs.builder()        \n            .dataaccessControllerId(dataaccessControllerId)\n            .type(\"BIGQUERY\")\n            .projectIds(            \n                \"abc\",\n                \"cdf\")\n            .hostname(\"data source target hostname\")\n            .originPort(8081)\n            .baselineSecurityPolicy(DatastoreBaselineSecurityPolicyArgs.builder()\n                .unassociatedQueriesCategory(DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs.builder()\n                    .queryAction(\"REDACT\")\n                    .build())\n                .unsupportedQueriesCategory(DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs.builder()\n                    .queryAction(\"REDACT\")\n                    .build())\n                .exclusions(DatastoreBaselineSecurityPolicyExclusionsArgs.builder()\n                    .excludedIdentities(                    \n                        DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs.builder()\n                            .identityType(\"USER\")\n                            .identity(\"user1\")\n                            .build(),\n                        DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs.builder()\n                            .identityType(\"USER\")\n                            .identity(\"user2\")\n                            .build())\n                    .excludedQueryPatterns(                    \n                        DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs.builder()\n                            .pattern(\".*a.*\")\n                            .build(),\n                        DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs.builder()\n                            .pattern(\".*b.*\")\n                            .build())\n                    .build())\n                .build())\n            .networkPolicies(DatastoreNetworkPolicyArgs.builder()\n                .allowedRules(DatastoreNetworkPolicyAllowedRuleArgs.builder()\n                    .note(\"desc1\")\n                    .ipRanges(                    \n                        DatastoreNetworkPolicyAllowedRuleIpRangeArgs.builder()\n                            .ipRange(\"1.1.1.0/24\")\n                            .build(),\n                        DatastoreNetworkPolicyAllowedRuleIpRangeArgs.builder()\n                            .ipRange(\"3.2.3.1\")\n                            .build())\n                    .build())\n                .blockedRules(DatastoreNetworkPolicyBlockedRuleArgs.builder()\n                    .note(\"desc3\")\n                    .ipRanges(                    \n                        DatastoreNetworkPolicyBlockedRuleIpRangeArgs.builder()\n                            .ipRange(\"1.1.1.0/30\")\n                            .build(),\n                        DatastoreNetworkPolicyBlockedRuleIpRangeArgs.builder()\n                            .ipRange(\"3.2.3.3\")\n                            .build())\n                    .build())\n                .build())\n            .build());\n\n        ctx.export(\"datastoreCreatedId\", datastore0.id());\n    }\n}\n```\n```yaml\nresources:\n  datastore0:\n    type: satori:Datastore\n    properties:\n      dataaccessControllerId: ${dataaccessControllerId}\n      # data source specific connection settings\n      type: BIGQUERY\n      projectIds:\n        - abc\n        - cdf\n      #  BigQuery affected project ids\n      hostname: data source target hostname\n      originPort: 8081\n      baselineSecurityPolicy:\n        unassociatedQueriesCategory:\n          queryAction: REDACT\n        unsupportedQueriesCategory:\n          queryAction: REDACT\n        exclusions:\n          excludedIdentities:\n            - identityType: USER\n              identity: user1\n            - identityType: USER\n              identity: user2\n          excludedQueryPatterns:\n            - pattern: .*a.*\n            - pattern: .*b.*\n      networkPolicies:\n        - allowedRules:\n            - note: desc1\n              ipRanges:\n                - ipRange: 1.1.1.0/24\n                - ipRange: 3.2.3.1\n          blockedRules:\n            - note: desc3\n              ipRanges:\n                - ipRange: 1.1.1.0/30\n                - ipRange: 3.2.3.3\nvariables:\n  dataaccessControllerId: \u003cassigned dataaccess_controller_id\u003e\noutputs:\n  datastoreCreatedId: ${datastore0.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\nconst datastore0 = new satori.Datastore(\"datastore0\", {\n    dataaccessControllerId: dataaccessControllerId,\n    type: \"POSTGRESQL\",\n    hostname: \"data source target hostname\",\n    originPort: 3532,\n    baselineSecurityPolicy: {\n        unassociatedQueriesCategory: {\n            queryAction: \"REDACT\",\n        },\n        unsupportedQueriesCategory: {\n            queryAction: \"REDACT\",\n        },\n        exclusions: {\n            excludedIdentities: [\n                {\n                    identityType: \"USER\",\n                    identity: \"user1\",\n                },\n                {\n                    identityType: \"USER\",\n                    identity: \"user2\",\n                },\n            ],\n            excludedQueryPatterns: [\n                {\n                    pattern: \".*a.*\",\n                },\n                {\n                    pattern: \".*b.*\",\n                },\n            ],\n        },\n    },\n    networkPolicies: [{\n        allowedRules: [{\n            note: \"desc1\",\n            ipRanges: [\n                {\n                    ipRange: \"1.1.1.0/24\",\n                },\n                {\n                    ipRange: \"3.2.3.1\",\n                },\n            ],\n        }],\n        blockedRules: [{\n            note: \"desc3\",\n            ipRanges: [\n                {\n                    ipRange: \"1.1.1.0/30\",\n                },\n                {\n                    ipRange: \"3.2.3.3\",\n                },\n            ],\n        }],\n    }],\n    satoriAuthSettings: {\n        enabled: true,\n        credentials: {\n            password: \"*********\",\n            username: \"adminuser\",\n        },\n    },\n});\nexport const datastoreCreatedId = datastore0.id;\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\ndataaccess_controller_id = \"\u003cassigned dataaccess_controller_id\u003e\"\ndatastore0 = satori.Datastore(\"datastore0\",\n    dataaccess_controller_id=dataaccess_controller_id,\n    type=\"POSTGRESQL\",\n    hostname=\"data source target hostname\",\n    origin_port=3532,\n    baseline_security_policy=satori.DatastoreBaselineSecurityPolicyArgs(\n        unassociated_queries_category=satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs(\n            query_action=\"REDACT\",\n        ),\n        unsupported_queries_category=satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs(\n            query_action=\"REDACT\",\n        ),\n        exclusions=satori.DatastoreBaselineSecurityPolicyExclusionsArgs(\n            excluded_identities=[\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs(\n                    identity_type=\"USER\",\n                    identity=\"user1\",\n                ),\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs(\n                    identity_type=\"USER\",\n                    identity=\"user2\",\n                ),\n            ],\n            excluded_query_patterns=[\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs(\n                    pattern=\".*a.*\",\n                ),\n                satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs(\n                    pattern=\".*b.*\",\n                ),\n            ],\n        ),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs(\n        allowed_rules=[satori.DatastoreNetworkPolicyAllowedRuleArgs(\n            note=\"desc1\",\n            ip_ranges=[\n                satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs(\n                    ip_range=\"1.1.1.0/24\",\n                ),\n                satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs(\n                    ip_range=\"3.2.3.1\",\n                ),\n            ],\n        )],\n        blocked_rules=[satori.DatastoreNetworkPolicyBlockedRuleArgs(\n            note=\"desc3\",\n            ip_ranges=[\n                satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs(\n                    ip_range=\"1.1.1.0/30\",\n                ),\n                satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs(\n                    ip_range=\"3.2.3.3\",\n                ),\n            ],\n        )],\n    )],\n    satori_auth_settings=satori.DatastoreSatoriAuthSettingsArgs(\n        enabled=True,\n        credentials=satori.DatastoreSatoriAuthSettingsCredentialsArgs(\n            password=\"*********\",\n            username=\"adminuser\",\n        ),\n    ))\npulumi.export(\"datastoreCreatedId\", datastore0.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n    var datastore0 = new Satori.Datastore(\"datastore0\", new()\n    {\n        DataaccessControllerId = dataaccessControllerId,\n        Type = \"POSTGRESQL\",\n        Hostname = \"data source target hostname\",\n        OriginPort = 3532,\n        BaselineSecurityPolicy = new Satori.Inputs.DatastoreBaselineSecurityPolicyArgs\n        {\n            UnassociatedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs\n            {\n                QueryAction = \"REDACT\",\n            },\n            UnsupportedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs\n            {\n                QueryAction = \"REDACT\",\n            },\n            Exclusions = new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsArgs\n            {\n                ExcludedIdentities = new[]\n                {\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs\n                    {\n                        IdentityType = \"USER\",\n                        Identity = \"user1\",\n                    },\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs\n                    {\n                        IdentityType = \"USER\",\n                        Identity = \"user2\",\n                    },\n                },\n                ExcludedQueryPatterns = new[]\n                {\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs\n                    {\n                        Pattern = \".*a.*\",\n                    },\n                    new Satori.Inputs.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs\n                    {\n                        Pattern = \".*b.*\",\n                    },\n                },\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            new Satori.Inputs.DatastoreNetworkPolicyArgs\n            {\n                AllowedRules = new[]\n                {\n                    new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleArgs\n                    {\n                        Note = \"desc1\",\n                        IpRanges = new[]\n                        {\n                            new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleIpRangeArgs\n                            {\n                                IpRange = \"1.1.1.0/24\",\n                            },\n                            new Satori.Inputs.DatastoreNetworkPolicyAllowedRuleIpRangeArgs\n                            {\n                                IpRange = \"3.2.3.1\",\n                            },\n                        },\n                    },\n                },\n                BlockedRules = new[]\n                {\n                    new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleArgs\n                    {\n                        Note = \"desc3\",\n                        IpRanges = new[]\n                        {\n                            new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleIpRangeArgs\n                            {\n                                IpRange = \"1.1.1.0/30\",\n                            },\n                            new Satori.Inputs.DatastoreNetworkPolicyBlockedRuleIpRangeArgs\n                            {\n                                IpRange = \"3.2.3.3\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        SatoriAuthSettings = new Satori.Inputs.DatastoreSatoriAuthSettingsArgs\n        {\n            Enabled = true,\n            Credentials = new Satori.Inputs.DatastoreSatoriAuthSettingsCredentialsArgs\n            {\n                Password = \"*********\",\n                Username = \"adminuser\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datastoreCreatedId\"] = datastore0.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataaccessControllerId := \"\u003cassigned dataaccess_controller_id\u003e\"\n\t\tdatastore0, err := satori.NewDatastore(ctx, \"datastore0\", \u0026satori.DatastoreArgs{\n\t\t\tDataaccessControllerId: pulumi.String(dataaccessControllerId),\n\t\t\tType:                   pulumi.String(\"POSTGRESQL\"),\n\t\t\tHostname:               pulumi.String(\"data source target hostname\"),\n\t\t\tOriginPort:             pulumi.Int(3532),\n\t\t\tBaselineSecurityPolicy: \u0026satori.DatastoreBaselineSecurityPolicyArgs{\n\t\t\t\tUnassociatedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"REDACT\"),\n\t\t\t\t},\n\t\t\t\tUnsupportedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"REDACT\"),\n\t\t\t\t},\n\t\t\t\tExclusions: \u0026satori.DatastoreBaselineSecurityPolicyExclusionsArgs{\n\t\t\t\t\tExcludedIdentities: satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArray{\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs{\n\t\t\t\t\t\t\tIdentityType: pulumi.String(\"USER\"),\n\t\t\t\t\t\t\tIdentity:     pulumi.String(\"user1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs{\n\t\t\t\t\t\t\tIdentityType: pulumi.String(\"USER\"),\n\t\t\t\t\t\t\tIdentity:     pulumi.String(\"user2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tExcludedQueryPatterns: satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArray{\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs{\n\t\t\t\t\t\t\tPattern: pulumi.String(\".*a.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026satori.DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs{\n\t\t\t\t\t\t\tPattern: pulumi.String(\".*b.*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\t\u0026satori.DatastoreNetworkPolicyArgs{\n\t\t\t\t\tAllowedRules: satori.DatastoreNetworkPolicyAllowedRuleArray{\n\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleArgs{\n\t\t\t\t\t\t\tNote: pulumi.String(\"desc1\"),\n\t\t\t\t\t\t\tIpRanges: satori.DatastoreNetworkPolicyAllowedRuleIpRangeArray{\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"1.1.1.0/24\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyAllowedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"3.2.3.1\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tBlockedRules: satori.DatastoreNetworkPolicyBlockedRuleArray{\n\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleArgs{\n\t\t\t\t\t\t\tNote: pulumi.String(\"desc3\"),\n\t\t\t\t\t\t\tIpRanges: satori.DatastoreNetworkPolicyBlockedRuleIpRangeArray{\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"1.1.1.0/30\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026satori.DatastoreNetworkPolicyBlockedRuleIpRangeArgs{\n\t\t\t\t\t\t\t\t\tIpRange: pulumi.String(\"3.2.3.3\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tSatoriAuthSettings: \u0026satori.DatastoreSatoriAuthSettingsArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tCredentials: \u0026satori.DatastoreSatoriAuthSettingsCredentialsArgs{\n\t\t\t\t\tPassword: pulumi.String(\"*********\"),\n\t\t\t\t\tUsername: pulumi.String(\"adminuser\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datastoreCreatedId\", datastore0.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.Datastore;\nimport com.pulumi.satori.DatastoreArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyExclusionsArgs;\nimport com.pulumi.satori.inputs.DatastoreNetworkPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n        var datastore0 = new Datastore(\"datastore0\", DatastoreArgs.builder()        \n            .dataaccessControllerId(dataaccessControllerId)\n            .type(\"POSTGRESQL\")\n            .hostname(\"data source target hostname\")\n            .originPort(3532)\n            .baselineSecurityPolicy(DatastoreBaselineSecurityPolicyArgs.builder()\n                .unassociatedQueriesCategory(DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs.builder()\n                    .queryAction(\"REDACT\")\n                    .build())\n                .unsupportedQueriesCategory(DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs.builder()\n                    .queryAction(\"REDACT\")\n                    .build())\n                .exclusions(DatastoreBaselineSecurityPolicyExclusionsArgs.builder()\n                    .excludedIdentities(                    \n                        DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs.builder()\n                            .identityType(\"USER\")\n                            .identity(\"user1\")\n                            .build(),\n                        DatastoreBaselineSecurityPolicyExclusionsExcludedIdentityArgs.builder()\n                            .identityType(\"USER\")\n                            .identity(\"user2\")\n                            .build())\n                    .excludedQueryPatterns(                    \n                        DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs.builder()\n                            .pattern(\".*a.*\")\n                            .build(),\n                        DatastoreBaselineSecurityPolicyExclusionsExcludedQueryPatternArgs.builder()\n                            .pattern(\".*b.*\")\n                            .build())\n                    .build())\n                .build())\n            .networkPolicies(DatastoreNetworkPolicyArgs.builder()\n                .allowedRules(DatastoreNetworkPolicyAllowedRuleArgs.builder()\n                    .note(\"desc1\")\n                    .ipRanges(                    \n                        DatastoreNetworkPolicyAllowedRuleIpRangeArgs.builder()\n                            .ipRange(\"1.1.1.0/24\")\n                            .build(),\n                        DatastoreNetworkPolicyAllowedRuleIpRangeArgs.builder()\n                            .ipRange(\"3.2.3.1\")\n                            .build())\n                    .build())\n                .blockedRules(DatastoreNetworkPolicyBlockedRuleArgs.builder()\n                    .note(\"desc3\")\n                    .ipRanges(                    \n                        DatastoreNetworkPolicyBlockedRuleIpRangeArgs.builder()\n                            .ipRange(\"1.1.1.0/30\")\n                            .build(),\n                        DatastoreNetworkPolicyBlockedRuleIpRangeArgs.builder()\n                            .ipRange(\"3.2.3.3\")\n                            .build())\n                    .build())\n                .build())\n            .satoriAuthSettings(DatastoreSatoriAuthSettingsArgs.builder()\n                .enabled(true)\n                .credentials(DatastoreSatoriAuthSettingsCredentialsArgs.builder()\n                    .password(\"*********\")\n                    .username(\"adminuser\")\n                    .build())\n                .build())\n            .build());\n\n        ctx.export(\"datastoreCreatedId\", datastore0.id());\n    }\n}\n```\n```yaml\nresources:\n  datastore0:\n    type: satori:Datastore\n    properties:\n      dataaccessControllerId: ${dataaccessControllerId}\n      # data source specific connection settings\n      type: POSTGRESQL\n      hostname: data source target hostname\n      originPort: 3532\n      baselineSecurityPolicy:\n        unassociatedQueriesCategory:\n          queryAction: REDACT\n        unsupportedQueriesCategory:\n          queryAction: REDACT\n        exclusions:\n          excludedIdentities:\n            - identityType: USER\n              identity: user1\n            - identityType: USER\n              identity: user2\n          excludedQueryPatterns:\n            - pattern: .*a.*\n            - pattern: .*b.*\n      networkPolicies:\n        - allowedRules:\n            - note: desc1\n              ipRanges:\n                - ipRange: 1.1.1.0/24\n                - ipRange: 3.2.3.1\n          blockedRules:\n            - note: desc3\n              ipRanges:\n                - ipRange: 1.1.1.0/30\n                - ipRange: 3.2.3.3\n      satoriAuthSettings:\n        enabled: true\n        credentials:\n          password: '*********'\n          username: adminuser\nvariables:\n  dataaccessControllerId: \u003cassigned dataaccess_controller_id\u003e\noutputs:\n  datastoreCreatedId: ${datastore0.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "baselineSecurityPolicy": {
                    "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicy:DatastoreBaselineSecurityPolicy",
                    "description": "Baseline security policy.\n"
                },
                "customIngressPort": {
                    "type": "integer",
                    "description": "Custom ingress port number description.\n"
                },
                "dataaccessControllerId": {
                    "type": "string",
                    "description": "Host FQDN name.\n"
                },
                "datastoreSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreDatastoreSetting:DatastoreDatastoreSetting"
                    },
                    "description": "Settings for a Data Store (may be unique per Data Store)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Data provider's FQDN hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "DataStore name.\n"
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicy:DatastoreNetworkPolicy"
                    },
                    "description": "A network Policy for a Data Store\n"
                },
                "originPort": {
                    "type": "integer",
                    "description": "Port number description.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ProjectIds list of project IDs\n"
                },
                "satoriAuthSettings": {
                    "$ref": "#/types/satori:index/DatastoreSatoriAuthSettings:DatastoreSatoriAuthSettings",
                    "description": "Sets the authentication settings for the Data Store\n"
                },
                "satoriHostname": {
                    "type": "string",
                    "description": "Satori Hostname.\n"
                },
                "type": {
                    "type": "string",
                    "description": "DataStore security policy. Defaults to `BASELINE_POLICY`.\n"
                }
            },
            "required": [
                "dataaccessControllerId",
                "hostname",
                "name",
                "satoriHostname",
                "type"
            ],
            "inputProperties": {
                "baselineSecurityPolicy": {
                    "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicy:DatastoreBaselineSecurityPolicy",
                    "description": "Baseline security policy.\n"
                },
                "customIngressPort": {
                    "type": "integer",
                    "description": "Custom ingress port number description.\n"
                },
                "dataaccessControllerId": {
                    "type": "string",
                    "description": "Host FQDN name.\n"
                },
                "datastoreSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreDatastoreSetting:DatastoreDatastoreSetting"
                    },
                    "description": "Settings for a Data Store (may be unique per Data Store)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Data provider's FQDN hostname.\n"
                },
                "name": {
                    "type": "string",
                    "description": "DataStore name.\n"
                },
                "networkPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DatastoreNetworkPolicy:DatastoreNetworkPolicy"
                    },
                    "description": "A network Policy for a Data Store\n"
                },
                "originPort": {
                    "type": "integer",
                    "description": "Port number description.\n"
                },
                "projectIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ProjectIds list of project IDs\n"
                },
                "satoriAuthSettings": {
                    "$ref": "#/types/satori:index/DatastoreSatoriAuthSettings:DatastoreSatoriAuthSettings",
                    "description": "Sets the authentication settings for the Data Store\n"
                },
                "type": {
                    "type": "string",
                    "description": "DataStore security policy. Defaults to `BASELINE_POLICY`.\n"
                }
            },
            "requiredInputs": [
                "dataaccessControllerId",
                "hostname",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Datastore resources.\n",
                "properties": {
                    "baselineSecurityPolicy": {
                        "$ref": "#/types/satori:index/DatastoreBaselineSecurityPolicy:DatastoreBaselineSecurityPolicy",
                        "description": "Baseline security policy.\n"
                    },
                    "customIngressPort": {
                        "type": "integer",
                        "description": "Custom ingress port number description.\n"
                    },
                    "dataaccessControllerId": {
                        "type": "string",
                        "description": "Host FQDN name.\n"
                    },
                    "datastoreSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/satori:index/DatastoreDatastoreSetting:DatastoreDatastoreSetting"
                        },
                        "description": "Settings for a Data Store (may be unique per Data Store)\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Data provider's FQDN hostname.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "DataStore name.\n"
                    },
                    "networkPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/satori:index/DatastoreNetworkPolicy:DatastoreNetworkPolicy"
                        },
                        "description": "A network Policy for a Data Store\n"
                    },
                    "originPort": {
                        "type": "integer",
                        "description": "Port number description.\n"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "ProjectIds list of project IDs\n"
                    },
                    "satoriAuthSettings": {
                        "$ref": "#/types/satori:index/DatastoreSatoriAuthSettings:DatastoreSatoriAuthSettings",
                        "description": "Sets the authentication settings for the Data Store\n"
                    },
                    "satoriHostname": {
                        "type": "string",
                        "description": "Satori Hostname.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "DataStore security policy. Defaults to `BASELINE_POLICY`.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/directoryGroup:DirectoryGroup": {
            "description": "The **satori_directory_group** resource allows defining directory groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst group1 = new satori.DirectoryGroup(\"group1\", {\n    description: \"group from terraform\",\n    members: [\n        {\n            type: \"USERNAME\",\n            name: \"username\",\n        },\n        {\n            type: \"IDP_GROUP\",\n            name: \"group_name1\",\n            identityProvider: \"OKTA\",\n        },\n        {\n            type: \"DB_ROLE\",\n            name: \"role_name\",\n            dataStoreType: \"SNOWFLAKE\",\n        },\n    ],\n});\nconst groupInGroup = new satori.DirectoryGroup(\"groupInGroup\", {\n    description: \"group with group from terraform\",\n    members: [\n        {\n            type: \"USERNAME\",\n            name: \"name\",\n        },\n        {\n            type: \"DIRECTORY_GROUP\",\n            groupId: group1.id,\n        },\n    ],\n});\nconst emptyGroup = new satori.DirectoryGroup(\"emptyGroup\", {description: \"Empty directory group\"});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\ngroup1 = satori.DirectoryGroup(\"group1\",\n    description=\"group from terraform\",\n    members=[\n        satori.DirectoryGroupMemberArgs(\n            type=\"USERNAME\",\n            name=\"username\",\n        ),\n        satori.DirectoryGroupMemberArgs(\n            type=\"IDP_GROUP\",\n            name=\"group_name1\",\n            identity_provider=\"OKTA\",\n        ),\n        satori.DirectoryGroupMemberArgs(\n            type=\"DB_ROLE\",\n            name=\"role_name\",\n            data_store_type=\"SNOWFLAKE\",\n        ),\n    ])\ngroup_in_group = satori.DirectoryGroup(\"groupInGroup\",\n    description=\"group with group from terraform\",\n    members=[\n        satori.DirectoryGroupMemberArgs(\n            type=\"USERNAME\",\n            name=\"name\",\n        ),\n        satori.DirectoryGroupMemberArgs(\n            type=\"DIRECTORY_GROUP\",\n            group_id=group1.id,\n        ),\n    ])\nempty_group = satori.DirectoryGroup(\"emptyGroup\", description=\"Empty directory group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = new Satori.DirectoryGroup(\"group1\", new()\n    {\n        Description = \"group from terraform\",\n        Members = new[]\n        {\n            new Satori.Inputs.DirectoryGroupMemberArgs\n            {\n                Type = \"USERNAME\",\n                Name = \"username\",\n            },\n            new Satori.Inputs.DirectoryGroupMemberArgs\n            {\n                Type = \"IDP_GROUP\",\n                Name = \"group_name1\",\n                IdentityProvider = \"OKTA\",\n            },\n            new Satori.Inputs.DirectoryGroupMemberArgs\n            {\n                Type = \"DB_ROLE\",\n                Name = \"role_name\",\n                DataStoreType = \"SNOWFLAKE\",\n            },\n        },\n    });\n\n    var groupInGroup = new Satori.DirectoryGroup(\"groupInGroup\", new()\n    {\n        Description = \"group with group from terraform\",\n        Members = new[]\n        {\n            new Satori.Inputs.DirectoryGroupMemberArgs\n            {\n                Type = \"USERNAME\",\n                Name = \"name\",\n            },\n            new Satori.Inputs.DirectoryGroupMemberArgs\n            {\n                Type = \"DIRECTORY_GROUP\",\n                GroupId = group1.Id,\n            },\n        },\n    });\n\n    var emptyGroup = new Satori.DirectoryGroup(\"emptyGroup\", new()\n    {\n        Description = \"Empty directory group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroup1, err := satori.NewDirectoryGroup(ctx, \"group1\", \u0026satori.DirectoryGroupArgs{\n\t\t\tDescription: pulumi.String(\"group from terraform\"),\n\t\t\tMembers: satori.DirectoryGroupMemberArray{\n\t\t\t\t\u0026satori.DirectoryGroupMemberArgs{\n\t\t\t\t\tType: pulumi.String(\"USERNAME\"),\n\t\t\t\t\tName: pulumi.String(\"username\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.DirectoryGroupMemberArgs{\n\t\t\t\t\tType:             pulumi.String(\"IDP_GROUP\"),\n\t\t\t\t\tName:             pulumi.String(\"group_name1\"),\n\t\t\t\t\tIdentityProvider: pulumi.String(\"OKTA\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.DirectoryGroupMemberArgs{\n\t\t\t\t\tType:          pulumi.String(\"DB_ROLE\"),\n\t\t\t\t\tName:          pulumi.String(\"role_name\"),\n\t\t\t\t\tDataStoreType: pulumi.String(\"SNOWFLAKE\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDirectoryGroup(ctx, \"groupInGroup\", \u0026satori.DirectoryGroupArgs{\n\t\t\tDescription: pulumi.String(\"group with group from terraform\"),\n\t\t\tMembers: satori.DirectoryGroupMemberArray{\n\t\t\t\t\u0026satori.DirectoryGroupMemberArgs{\n\t\t\t\t\tType: pulumi.String(\"USERNAME\"),\n\t\t\t\t\tName: pulumi.String(\"name\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.DirectoryGroupMemberArgs{\n\t\t\t\t\tType:    pulumi.String(\"DIRECTORY_GROUP\"),\n\t\t\t\t\tGroupId: group1.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDirectoryGroup(ctx, \"emptyGroup\", \u0026satori.DirectoryGroupArgs{\n\t\t\tDescription: pulumi.String(\"Empty directory group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.DirectoryGroup;\nimport com.pulumi.satori.DirectoryGroupArgs;\nimport com.pulumi.satori.inputs.DirectoryGroupMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group1 = new DirectoryGroup(\"group1\", DirectoryGroupArgs.builder()        \n            .description(\"group from terraform\")\n            .members(            \n                DirectoryGroupMemberArgs.builder()\n                    .type(\"USERNAME\")\n                    .name(\"username\")\n                    .build(),\n                DirectoryGroupMemberArgs.builder()\n                    .type(\"IDP_GROUP\")\n                    .name(\"group_name1\")\n                    .identityProvider(\"OKTA\")\n                    .build(),\n                DirectoryGroupMemberArgs.builder()\n                    .type(\"DB_ROLE\")\n                    .name(\"role_name\")\n                    .dataStoreType(\"SNOWFLAKE\")\n                    .build())\n            .build());\n\n        var groupInGroup = new DirectoryGroup(\"groupInGroup\", DirectoryGroupArgs.builder()        \n            .description(\"group with group from terraform\")\n            .members(            \n                DirectoryGroupMemberArgs.builder()\n                    .type(\"USERNAME\")\n                    .name(\"name\")\n                    .build(),\n                DirectoryGroupMemberArgs.builder()\n                    .type(\"DIRECTORY_GROUP\")\n                    .groupId(group1.id())\n                    .build())\n            .build());\n\n        var emptyGroup = new DirectoryGroup(\"emptyGroup\", DirectoryGroupArgs.builder()        \n            .description(\"Empty directory group\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group1:\n    type: satori:DirectoryGroup\n    properties:\n      description: group from terraform\n      members:\n        - type: USERNAME\n          name: username\n        - type: IDP_GROUP\n          name: group_name1\n          identityProvider: OKTA\n        - type: DB_ROLE\n          name: role_name\n          dataStoreType: SNOWFLAKE\n  groupInGroup:\n    type: satori:DirectoryGroup\n    properties:\n      description: group with group from terraform\n      members:\n        - type: USERNAME\n          name: name\n        - type: DIRECTORY_GROUP\n          groupId: ${group1.id}\n  emptyGroup:\n    type: satori:DirectoryGroup\n    properties:\n      description: Empty directory group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Group description.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DirectoryGroupMember:DirectoryGroupMember"
                    },
                    "description": "Group members.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Member name for types: USERNAME, IDP*GROUP and DB*ROLE.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Group description.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/DirectoryGroupMember:DirectoryGroupMember"
                    },
                    "description": "Group members.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Member name for types: USERNAME, IDP*GROUP and DB*ROLE.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectoryGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Group description.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/satori:index/DirectoryGroupMember:DirectoryGroupMember"
                        },
                        "description": "Group members.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Member name for types: USERNAME, IDP*GROUP and DB*ROLE.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/maskingProfile:MaskingProfile": {
            "description": "Satori’s Masking profiles allow organizations to mask query responses for their users to avoid exposing sensitive information.\n\nThe **masking_profile** resource allows defining masking profiles.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst maskingProfile = new satori.MaskingProfile(\"maskingProfile\", {conditions: [\n    {\n        tag: \"c12n.pii::address\",\n        type: \"TRUNCATE\",\n        truncate: 1,\n    },\n    {\n        tag: \"c12n.pii::address\",\n        type: \"REPLACE_CHAR\",\n        replacement: \"a\",\n    },\n    {\n        tag: satori_custom_taxonomy_classifier.cls2.tag,\n        type: \"EMAIL_PREFIX\",\n    },\n    {\n        tag: satori_custom_taxonomy_classifier.cls2.tag,\n        type: \"REPLACE_CHAR\",\n        replacement: \"a\",\n    },\n]});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\nmasking_profile = satori.MaskingProfile(\"maskingProfile\", conditions=[\n    satori.MaskingProfileConditionArgs(\n        tag=\"c12n.pii::address\",\n        type=\"TRUNCATE\",\n        truncate=1,\n    ),\n    satori.MaskingProfileConditionArgs(\n        tag=\"c12n.pii::address\",\n        type=\"REPLACE_CHAR\",\n        replacement=\"a\",\n    ),\n    satori.MaskingProfileConditionArgs(\n        tag=satori_custom_taxonomy_classifier[\"cls2\"][\"tag\"],\n        type=\"EMAIL_PREFIX\",\n    ),\n    satori.MaskingProfileConditionArgs(\n        tag=satori_custom_taxonomy_classifier[\"cls2\"][\"tag\"],\n        type=\"REPLACE_CHAR\",\n        replacement=\"a\",\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var maskingProfile = new Satori.MaskingProfile(\"maskingProfile\", new()\n    {\n        Conditions = new[]\n        {\n            new Satori.Inputs.MaskingProfileConditionArgs\n            {\n                Tag = \"c12n.pii::address\",\n                Type = \"TRUNCATE\",\n                Truncate = 1,\n            },\n            new Satori.Inputs.MaskingProfileConditionArgs\n            {\n                Tag = \"c12n.pii::address\",\n                Type = \"REPLACE_CHAR\",\n                Replacement = \"a\",\n            },\n            new Satori.Inputs.MaskingProfileConditionArgs\n            {\n                Tag = satori_custom_taxonomy_classifier.Cls2.Tag,\n                Type = \"EMAIL_PREFIX\",\n            },\n            new Satori.Inputs.MaskingProfileConditionArgs\n            {\n                Tag = satori_custom_taxonomy_classifier.Cls2.Tag,\n                Type = \"REPLACE_CHAR\",\n                Replacement = \"a\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := satori.NewMaskingProfile(ctx, \"maskingProfile\", \u0026satori.MaskingProfileArgs{\n\t\t\tConditions: satori.MaskingProfileConditionArray{\n\t\t\t\t\u0026satori.MaskingProfileConditionArgs{\n\t\t\t\t\tTag:      pulumi.String(\"c12n.pii::address\"),\n\t\t\t\t\tType:     pulumi.String(\"TRUNCATE\"),\n\t\t\t\t\tTruncate: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026satori.MaskingProfileConditionArgs{\n\t\t\t\t\tTag:         pulumi.String(\"c12n.pii::address\"),\n\t\t\t\t\tType:        pulumi.String(\"REPLACE_CHAR\"),\n\t\t\t\t\tReplacement: pulumi.String(\"a\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.MaskingProfileConditionArgs{\n\t\t\t\t\tTag:  pulumi.Any(satori_custom_taxonomy_classifier.Cls2.Tag),\n\t\t\t\t\tType: pulumi.String(\"EMAIL_PREFIX\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.MaskingProfileConditionArgs{\n\t\t\t\t\tTag:         pulumi.Any(satori_custom_taxonomy_classifier.Cls2.Tag),\n\t\t\t\t\tType:        pulumi.String(\"REPLACE_CHAR\"),\n\t\t\t\t\tReplacement: pulumi.String(\"a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.MaskingProfile;\nimport com.pulumi.satori.MaskingProfileArgs;\nimport com.pulumi.satori.inputs.MaskingProfileConditionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var maskingProfile = new MaskingProfile(\"maskingProfile\", MaskingProfileArgs.builder()        \n            .conditions(            \n                MaskingProfileConditionArgs.builder()\n                    .tag(\"c12n.pii::address\")\n                    .type(\"TRUNCATE\")\n                    .truncate(1)\n                    .build(),\n                MaskingProfileConditionArgs.builder()\n                    .tag(\"c12n.pii::address\")\n                    .type(\"REPLACE_CHAR\")\n                    .replacement(\"a\")\n                    .build(),\n                MaskingProfileConditionArgs.builder()\n                    .tag(satori_custom_taxonomy_classifier.cls2().tag())\n                    .type(\"EMAIL_PREFIX\")\n                    .build(),\n                MaskingProfileConditionArgs.builder()\n                    .tag(satori_custom_taxonomy_classifier.cls2().tag())\n                    .type(\"REPLACE_CHAR\")\n                    .replacement(\"a\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  maskingProfile:\n    type: satori:MaskingProfile\n    properties:\n      conditions:\n        - tag: c12n.pii::address\n          type: TRUNCATE\n          truncate: 1\n        - tag: c12n.pii::address\n          type: REPLACE_CHAR\n          replacement: a\n        - tag: ${satori_custom_taxonomy_classifier.cls2.tag}\n          type: EMAIL_PREFIX\n        - tag: ${satori_custom_taxonomy_classifier.cls2.tag}\n          type: REPLACE_CHAR\n          replacement: a\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/MaskingProfileCondition:MaskingProfileCondition"
                    },
                    "description": "Masking profile condition.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Masking profile description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Masking profile name.\n"
                }
            },
            "required": [
                "conditions",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/MaskingProfileCondition:MaskingProfileCondition"
                    },
                    "description": "Masking profile condition.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Masking profile description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Masking profile name.\n"
                }
            },
            "requiredInputs": [
                "conditions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingProfile resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/satori:index/MaskingProfileCondition:MaskingProfileCondition"
                        },
                        "description": "Masking profile condition.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Masking profile description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Masking profile name.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/requestAccessRule:RequestAccessRule": {
            "description": "The **satori_request_access_rule** resource allows defining dataset access request rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst requestAccess1Dataset1 = new satori.RequestAccessRule(\"requestAccess1Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"OWNER\",\n    identity: {\n        type: \"USER\",\n        name: \"test-user\",\n    },\n    expireIn: {\n        unitType: \"MONTHS\",\n        units: 3,\n    },\n    revokeIfNotUsedInDays: 90,\n    requireApproverNote: true,\n    approvers: [\n        {\n            type: \"GROUP\",\n            id: \"781246b7-461d-493a-a2d6-86f2e5w01ff2\",\n        },\n        {\n            type: \"USER\",\n            id: \"78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\",\n        },\n        {\n            type: \"MANAGER\",\n        },\n    ],\n});\nconst requestAccess2Dataset1 = new satori.RequestAccessRule(\"requestAccess2Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"GROUP\",\n        groupId: satori_directory_group.group1.id,\n    },\n    expireIn: {\n        unitType: \"DAYS\",\n        units: 5,\n    },\n    revokeIfNotUsedInDays: 90,\n    securityPolicies: [],\n    requireApproverNote: false,\n});\n// Optional, as default is false\nconst requestAccess3Dataset1 = new satori.RequestAccessRule(\"requestAccess3Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_WRITE\",\n    identity: {\n        type: \"IDP_GROUP\",\n        name: \"groupName\",\n    },\n    securityPolicies: [\"none\"],\n    enabled: false,\n});\nconst requestAccess1DatasetDefinition1 = new satori.RequestAccessRule(\"requestAccess1DatasetDefinition1\", {\n    parentDataPolicy: satori_dataset.dataset_definition1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"EVERYONE\",\n    },\n    securityPolicies: [\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"],\n});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\nrequest_access1_dataset1 = satori.RequestAccessRule(\"requestAccess1Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"OWNER\",\n    identity=satori.RequestAccessRuleIdentityArgs(\n        type=\"USER\",\n        name=\"test-user\",\n    ),\n    expire_in=satori.RequestAccessRuleExpireInArgs(\n        unit_type=\"MONTHS\",\n        units=3,\n    ),\n    revoke_if_not_used_in_days=90,\n    require_approver_note=True,\n    approvers=[\n        satori.RequestAccessRuleApproverArgs(\n            type=\"GROUP\",\n            id=\"781246b7-461d-493a-a2d6-86f2e5w01ff2\",\n        ),\n        satori.RequestAccessRuleApproverArgs(\n            type=\"USER\",\n            id=\"78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\",\n        ),\n        satori.RequestAccessRuleApproverArgs(\n            type=\"MANAGER\",\n        ),\n    ])\nrequest_access2_dataset1 = satori.RequestAccessRule(\"requestAccess2Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.RequestAccessRuleIdentityArgs(\n        type=\"GROUP\",\n        group_id=satori_directory_group[\"group1\"][\"id\"],\n    ),\n    expire_in=satori.RequestAccessRuleExpireInArgs(\n        unit_type=\"DAYS\",\n        units=5,\n    ),\n    revoke_if_not_used_in_days=90,\n    security_policies=[],\n    require_approver_note=False)\n# Optional, as default is false\nrequest_access3_dataset1 = satori.RequestAccessRule(\"requestAccess3Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_WRITE\",\n    identity=satori.RequestAccessRuleIdentityArgs(\n        type=\"IDP_GROUP\",\n        name=\"groupName\",\n    ),\n    security_policies=[\"none\"],\n    enabled=False)\nrequest_access1_dataset_definition1 = satori.RequestAccessRule(\"requestAccess1DatasetDefinition1\",\n    parent_data_policy=satori_dataset[\"dataset_definition1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.RequestAccessRuleIdentityArgs(\n        type=\"EVERYONE\",\n    ),\n    security_policies=[\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var requestAccess1Dataset1 = new Satori.RequestAccessRule(\"requestAccess1Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"OWNER\",\n        Identity = new Satori.Inputs.RequestAccessRuleIdentityArgs\n        {\n            Type = \"USER\",\n            Name = \"test-user\",\n        },\n        ExpireIn = new Satori.Inputs.RequestAccessRuleExpireInArgs\n        {\n            UnitType = \"MONTHS\",\n            Units = 3,\n        },\n        RevokeIfNotUsedInDays = 90,\n        RequireApproverNote = true,\n        Approvers = new[]\n        {\n            new Satori.Inputs.RequestAccessRuleApproverArgs\n            {\n                Type = \"GROUP\",\n                Id = \"781246b7-461d-493a-a2d6-86f2e5w01ff2\",\n            },\n            new Satori.Inputs.RequestAccessRuleApproverArgs\n            {\n                Type = \"USER\",\n                Id = \"78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\",\n            },\n            new Satori.Inputs.RequestAccessRuleApproverArgs\n            {\n                Type = \"MANAGER\",\n            },\n        },\n    });\n\n    var requestAccess2Dataset1 = new Satori.RequestAccessRule(\"requestAccess2Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.RequestAccessRuleIdentityArgs\n        {\n            Type = \"GROUP\",\n            GroupId = satori_directory_group.Group1.Id,\n        },\n        ExpireIn = new Satori.Inputs.RequestAccessRuleExpireInArgs\n        {\n            UnitType = \"DAYS\",\n            Units = 5,\n        },\n        RevokeIfNotUsedInDays = 90,\n        SecurityPolicies = new[] {},\n        RequireApproverNote = false,\n    });\n\n    // Optional, as default is false\n    var requestAccess3Dataset1 = new Satori.RequestAccessRule(\"requestAccess3Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_WRITE\",\n        Identity = new Satori.Inputs.RequestAccessRuleIdentityArgs\n        {\n            Type = \"IDP_GROUP\",\n            Name = \"groupName\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"none\",\n        },\n        Enabled = false,\n    });\n\n    var requestAccess1DatasetDefinition1 = new Satori.RequestAccessRule(\"requestAccess1DatasetDefinition1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset_definition1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.RequestAccessRuleIdentityArgs\n        {\n            Type = \"EVERYONE\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"8c4745f5-a21e-4b7a-bb21-83c54351539f\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := satori.NewRequestAccessRule(ctx, \"requestAccess1Dataset1\", \u0026satori.RequestAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"OWNER\"),\n\t\t\tIdentity: \u0026satori.RequestAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"USER\"),\n\t\t\t\tName: pulumi.String(\"test-user\"),\n\t\t\t},\n\t\t\tExpireIn: \u0026satori.RequestAccessRuleExpireInArgs{\n\t\t\t\tUnitType: pulumi.String(\"MONTHS\"),\n\t\t\t\tUnits:    pulumi.Int(3),\n\t\t\t},\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t\tRequireApproverNote:   pulumi.Bool(true),\n\t\t\tApprovers: satori.RequestAccessRuleApproverArray{\n\t\t\t\t\u0026satori.RequestAccessRuleApproverArgs{\n\t\t\t\t\tType: pulumi.String(\"GROUP\"),\n\t\t\t\t\tId:   pulumi.String(\"781246b7-461d-493a-a2d6-86f2e5w01ff2\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.RequestAccessRuleApproverArgs{\n\t\t\t\t\tType: pulumi.String(\"USER\"),\n\t\t\t\t\tId:   pulumi.String(\"78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\"),\n\t\t\t\t},\n\t\t\t\t\u0026satori.RequestAccessRuleApproverArgs{\n\t\t\t\t\tType: pulumi.String(\"MANAGER\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewRequestAccessRule(ctx, \"requestAccess2Dataset1\", \u0026satori.RequestAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.RequestAccessRuleIdentityArgs{\n\t\t\t\tType:    pulumi.String(\"GROUP\"),\n\t\t\t\tGroupId: pulumi.Any(satori_directory_group.Group1.Id),\n\t\t\t},\n\t\t\tExpireIn: \u0026satori.RequestAccessRuleExpireInArgs{\n\t\t\t\tUnitType: pulumi.String(\"DAYS\"),\n\t\t\t\tUnits:    pulumi.Int(5),\n\t\t\t},\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t\tSecurityPolicies:      pulumi.StringArray{},\n\t\t\tRequireApproverNote:   pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewRequestAccessRule(ctx, \"requestAccess3Dataset1\", \u0026satori.RequestAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_WRITE\"),\n\t\t\tIdentity: \u0026satori.RequestAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"IDP_GROUP\"),\n\t\t\t\tName: pulumi.String(\"groupName\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"none\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewRequestAccessRule(ctx, \"requestAccess1DatasetDefinition1\", \u0026satori.RequestAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset_definition1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.RequestAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"EVERYONE\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.RequestAccessRule;\nimport com.pulumi.satori.RequestAccessRuleArgs;\nimport com.pulumi.satori.inputs.RequestAccessRuleIdentityArgs;\nimport com.pulumi.satori.inputs.RequestAccessRuleExpireInArgs;\nimport com.pulumi.satori.inputs.RequestAccessRuleApproverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var requestAccess1Dataset1 = new RequestAccessRule(\"requestAccess1Dataset1\", RequestAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"OWNER\")\n            .identity(RequestAccessRuleIdentityArgs.builder()\n                .type(\"USER\")\n                .name(\"test-user\")\n                .build())\n            .expireIn(RequestAccessRuleExpireInArgs.builder()\n                .unitType(\"MONTHS\")\n                .units(3)\n                .build())\n            .revokeIfNotUsedInDays(90)\n            .requireApproverNote(true)\n            .approvers(            \n                RequestAccessRuleApproverArgs.builder()\n                    .type(\"GROUP\")\n                    .id(\"781246b7-461d-493a-a2d6-86f2e5w01ff2\")\n                    .build(),\n                RequestAccessRuleApproverArgs.builder()\n                    .type(\"USER\")\n                    .id(\"78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\")\n                    .build(),\n                RequestAccessRuleApproverArgs.builder()\n                    .type(\"MANAGER\")\n                    .build())\n            .build());\n\n        var requestAccess2Dataset1 = new RequestAccessRule(\"requestAccess2Dataset1\", RequestAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(RequestAccessRuleIdentityArgs.builder()\n                .type(\"GROUP\")\n                .groupId(satori_directory_group.group1().id())\n                .build())\n            .expireIn(RequestAccessRuleExpireInArgs.builder()\n                .unitType(\"DAYS\")\n                .units(5)\n                .build())\n            .revokeIfNotUsedInDays(90)\n            .securityPolicies()\n            .requireApproverNote(false)\n            .build());\n\n        // Optional, as default is false\n        var requestAccess3Dataset1 = new RequestAccessRule(\"requestAccess3Dataset1\", RequestAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_WRITE\")\n            .identity(RequestAccessRuleIdentityArgs.builder()\n                .type(\"IDP_GROUP\")\n                .name(\"groupName\")\n                .build())\n            .securityPolicies(\"none\")\n            .enabled(false)\n            .build());\n\n        var requestAccess1DatasetDefinition1 = new RequestAccessRule(\"requestAccess1DatasetDefinition1\", RequestAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset_definition1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(RequestAccessRuleIdentityArgs.builder()\n                .type(\"EVERYONE\")\n                .build())\n            .securityPolicies(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  requestAccess1Dataset1:\n    type: satori:RequestAccessRule\n    properties:\n      # reference to owning dataset\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      # granted access level, OWNER, READ_WRITE, READ_ONLY\n      accessLevel: OWNER\n      identity:\n        type: USER\n        name: test-user\n      expireIn:\n        unitType: MONTHS\n        units: 3\n      revokeIfNotUsedInDays: 90\n      requireApproverNote: true # default is false\n      # Optional to add approvers on an access-rule.\n      approvers:\n        - type: GROUP\n          id: 781246b7-461d-493a-a2d6-86f2e5w01ff2\n        - type: USER\n          id: 78dc2cb7-461d-493a-a2d6-86e71fv4v5d2\n        - type: MANAGER\n  requestAccess2Dataset1:\n    type: satori:RequestAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: GROUP\n        groupId: ${satori_directory_group.group1.id}\n      expireIn:\n        unitType: DAYS\n        units: 5\n      revokeIfNotUsedInDays: 90\n      # dataset default security policies\n      securityPolicies: []\n      requireApproverNote: false\n  requestAccess3Dataset1:\n    type: satori:RequestAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_WRITE\n      identity:\n        type: IDP_GROUP\n        name: groupName\n      # no security policies\n      securityPolicies:\n        - none\n      # suspend this rule\n      enabled: false\n  requestAccess1DatasetDefinition1:\n    type: satori:RequestAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset_definition1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: EVERYONE\n      # specific security policies\n      securityPolicies:\n        - 8c4745f5-a21e-4b7a-bb21-83c54351539f\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/RequestAccessRuleApprover:RequestAccessRuleApprover"
                    },
                    "description": "Identities of Satori users/IdP groups that will be set as access rule approvers. Once an access rule approver is defined, it is the ONLY entity that can approve the request generated from this access rule\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireIn": {
                    "$ref": "#/types/satori:index/RequestAccessRuleExpireIn:RequestAccessRuleExpireIn",
                    "description": "Rule expiration settings.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/RequestAccessRuleIdentity:RequestAccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "requireApproverNote": {
                    "type": "boolean",
                    "description": "Require from the approver an `approver note` when approving the request created from the defined rule. Defaults to `false`.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "required": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "approvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/satori:index/RequestAccessRuleApprover:RequestAccessRuleApprover"
                    },
                    "description": "Identities of Satori users/IdP groups that will be set as access rule approvers. Once an access rule approver is defined, it is the ONLY entity that can approve the request generated from this access rule\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireIn": {
                    "$ref": "#/types/satori:index/RequestAccessRuleExpireIn:RequestAccessRuleExpireIn",
                    "description": "Rule expiration settings.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/RequestAccessRuleIdentity:RequestAccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "requireApproverNote": {
                    "type": "boolean",
                    "description": "Require from the approver an `approver note` when approving the request created from the defined rule. Defaults to `false`.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RequestAccessRule resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                    },
                    "approvers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/satori:index/RequestAccessRuleApprover:RequestAccessRuleApprover"
                        },
                        "description": "Identities of Satori users/IdP groups that will be set as access rule approvers. Once an access rule approver is defined, it is the ONLY entity that can approve the request generated from this access rule\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the rule. Defaults to `true`.\n"
                    },
                    "expireIn": {
                        "$ref": "#/types/satori:index/RequestAccessRuleExpireIn:RequestAccessRuleExpireIn",
                        "description": "Rule expiration settings.\n"
                    },
                    "identity": {
                        "$ref": "#/types/satori:index/RequestAccessRuleIdentity:RequestAccessRuleIdentity",
                        "description": "Identity to apply the rule for.\n"
                    },
                    "parentDataPolicy": {
                        "type": "string",
                        "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                    },
                    "requireApproverNote": {
                        "type": "boolean",
                        "description": "Require from the approver an `approver note` when approving the request created from the defined rule. Defaults to `false`.\n"
                    },
                    "revokeIfNotUsedInDays": {
                        "type": "integer",
                        "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                    },
                    "securityPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/securityPolicy:SecurityPolicy": {
            "description": "The Satori Security Policy is a re-usable object that can be configured to contain multiple sets of dynamic masking configurations and data filtering configurations.\nA Security Policy can be applied to on one or more datasets.\n\nThe **security_policy** resource allows defining security policies.\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                },
                "profile": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfile:SecurityPolicyProfile",
                    "description": "Security policy profile.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                },
                "profile": {
                    "$ref": "#/types/satori:index/SecurityPolicyProfile:SecurityPolicyProfile",
                    "description": "Security policy profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityPolicy resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User/group name for identity types of USER and IDP_GROUP or a custom expression based on attributes of the identity for CEL identity type.\nCan not be changed after creation.\n"
                    },
                    "profile": {
                        "$ref": "#/types/satori:index/SecurityPolicyProfile:SecurityPolicyProfile",
                        "description": "Security policy profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/selfServiceAccessRule:SelfServiceAccessRule": {
            "description": "The **satori_self_service_access_rule** resource allows defining dataset self service access rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst selfService1Dataset1 = new satori.SelfServiceAccessRule(\"selfService1Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"OWNER\",\n    identity: {\n        type: \"USER\",\n        name: \"test-user\",\n    },\n    expireIn: {\n        unitType: \"MONTHS\",\n        units: 3,\n    },\n    revokeIfNotUsedInDays: 90,\n});\nconst selfService2Dataset1 = new satori.SelfServiceAccessRule(\"selfService2Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"GROUP\",\n        groupId: satori_directory_group.group1.id,\n    },\n    expireIn: {\n        unitType: \"DAYS\",\n        units: 5,\n    },\n    revokeIfNotUsedInDays: 90,\n    securityPolicies: [],\n});\nconst selfService3Dataset1 = new satori.SelfServiceAccessRule(\"selfService3Dataset1\", {\n    parentDataPolicy: satori_dataset.dataset1.data_policy_id,\n    accessLevel: \"READ_WRITE\",\n    identity: {\n        type: \"IDP_GROUP\",\n        name: \"groupName\",\n    },\n    securityPolicies: [\"none\"],\n    enabled: false,\n});\nconst selfService1DatasetDefinition1 = new satori.SelfServiceAccessRule(\"selfService1DatasetDefinition1\", {\n    parentDataPolicy: satori_dataset.dataset_definition1.data_policy_id,\n    accessLevel: \"READ_ONLY\",\n    identity: {\n        type: \"EVERYONE\",\n    },\n    securityPolicies: [\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"],\n});\n```\n```python\nimport pulumi\nimport satori_resources_config as satori\n\nself_service1_dataset1 = satori.SelfServiceAccessRule(\"selfService1Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"OWNER\",\n    identity=satori.SelfServiceAccessRuleIdentityArgs(\n        type=\"USER\",\n        name=\"test-user\",\n    ),\n    expire_in=satori.SelfServiceAccessRuleExpireInArgs(\n        unit_type=\"MONTHS\",\n        units=3,\n    ),\n    revoke_if_not_used_in_days=90)\nself_service2_dataset1 = satori.SelfServiceAccessRule(\"selfService2Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.SelfServiceAccessRuleIdentityArgs(\n        type=\"GROUP\",\n        group_id=satori_directory_group[\"group1\"][\"id\"],\n    ),\n    expire_in=satori.SelfServiceAccessRuleExpireInArgs(\n        unit_type=\"DAYS\",\n        units=5,\n    ),\n    revoke_if_not_used_in_days=90,\n    security_policies=[])\nself_service3_dataset1 = satori.SelfServiceAccessRule(\"selfService3Dataset1\",\n    parent_data_policy=satori_dataset[\"dataset1\"][\"data_policy_id\"],\n    access_level=\"READ_WRITE\",\n    identity=satori.SelfServiceAccessRuleIdentityArgs(\n        type=\"IDP_GROUP\",\n        name=\"groupName\",\n    ),\n    security_policies=[\"none\"],\n    enabled=False)\nself_service1_dataset_definition1 = satori.SelfServiceAccessRule(\"selfService1DatasetDefinition1\",\n    parent_data_policy=satori_dataset[\"dataset_definition1\"][\"data_policy_id\"],\n    access_level=\"READ_ONLY\",\n    identity=satori.SelfServiceAccessRuleIdentityArgs(\n        type=\"EVERYONE\",\n    ),\n    security_policies=[\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var selfService1Dataset1 = new Satori.SelfServiceAccessRule(\"selfService1Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"OWNER\",\n        Identity = new Satori.Inputs.SelfServiceAccessRuleIdentityArgs\n        {\n            Type = \"USER\",\n            Name = \"test-user\",\n        },\n        ExpireIn = new Satori.Inputs.SelfServiceAccessRuleExpireInArgs\n        {\n            UnitType = \"MONTHS\",\n            Units = 3,\n        },\n        RevokeIfNotUsedInDays = 90,\n    });\n\n    var selfService2Dataset1 = new Satori.SelfServiceAccessRule(\"selfService2Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.SelfServiceAccessRuleIdentityArgs\n        {\n            Type = \"GROUP\",\n            GroupId = satori_directory_group.Group1.Id,\n        },\n        ExpireIn = new Satori.Inputs.SelfServiceAccessRuleExpireInArgs\n        {\n            UnitType = \"DAYS\",\n            Units = 5,\n        },\n        RevokeIfNotUsedInDays = 90,\n        SecurityPolicies = new[] {},\n    });\n\n    var selfService3Dataset1 = new Satori.SelfServiceAccessRule(\"selfService3Dataset1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset1.Data_policy_id,\n        AccessLevel = \"READ_WRITE\",\n        Identity = new Satori.Inputs.SelfServiceAccessRuleIdentityArgs\n        {\n            Type = \"IDP_GROUP\",\n            Name = \"groupName\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"none\",\n        },\n        Enabled = false,\n    });\n\n    var selfService1DatasetDefinition1 = new Satori.SelfServiceAccessRule(\"selfService1DatasetDefinition1\", new()\n    {\n        ParentDataPolicy = satori_dataset.Dataset_definition1.Data_policy_id,\n        AccessLevel = \"READ_ONLY\",\n        Identity = new Satori.Inputs.SelfServiceAccessRuleIdentityArgs\n        {\n            Type = \"EVERYONE\",\n        },\n        SecurityPolicies = new[]\n        {\n            \"8c4745f5-a21e-4b7a-bb21-83c54351539f\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := satori.NewSelfServiceAccessRule(ctx, \"selfService1Dataset1\", \u0026satori.SelfServiceAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"OWNER\"),\n\t\t\tIdentity: \u0026satori.SelfServiceAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"USER\"),\n\t\t\t\tName: pulumi.String(\"test-user\"),\n\t\t\t},\n\t\t\tExpireIn: \u0026satori.SelfServiceAccessRuleExpireInArgs{\n\t\t\t\tUnitType: pulumi.String(\"MONTHS\"),\n\t\t\t\tUnits:    pulumi.Int(3),\n\t\t\t},\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewSelfServiceAccessRule(ctx, \"selfService2Dataset1\", \u0026satori.SelfServiceAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.SelfServiceAccessRuleIdentityArgs{\n\t\t\t\tType:    pulumi.String(\"GROUP\"),\n\t\t\t\tGroupId: pulumi.Any(satori_directory_group.Group1.Id),\n\t\t\t},\n\t\t\tExpireIn: \u0026satori.SelfServiceAccessRuleExpireInArgs{\n\t\t\t\tUnitType: pulumi.String(\"DAYS\"),\n\t\t\t\tUnits:    pulumi.Int(5),\n\t\t\t},\n\t\t\tRevokeIfNotUsedInDays: pulumi.Int(90),\n\t\t\tSecurityPolicies:      pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewSelfServiceAccessRule(ctx, \"selfService3Dataset1\", \u0026satori.SelfServiceAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_WRITE\"),\n\t\t\tIdentity: \u0026satori.SelfServiceAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"IDP_GROUP\"),\n\t\t\t\tName: pulumi.String(\"groupName\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"none\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewSelfServiceAccessRule(ctx, \"selfService1DatasetDefinition1\", \u0026satori.SelfServiceAccessRuleArgs{\n\t\t\tParentDataPolicy: pulumi.Any(satori_dataset.Dataset_definition1.Data_policy_id),\n\t\t\tAccessLevel:      pulumi.String(\"READ_ONLY\"),\n\t\t\tIdentity: \u0026satori.SelfServiceAccessRuleIdentityArgs{\n\t\t\t\tType: pulumi.String(\"EVERYONE\"),\n\t\t\t},\n\t\t\tSecurityPolicies: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SelfServiceAccessRule;\nimport com.pulumi.satori.SelfServiceAccessRuleArgs;\nimport com.pulumi.satori.inputs.SelfServiceAccessRuleIdentityArgs;\nimport com.pulumi.satori.inputs.SelfServiceAccessRuleExpireInArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var selfService1Dataset1 = new SelfServiceAccessRule(\"selfService1Dataset1\", SelfServiceAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"OWNER\")\n            .identity(SelfServiceAccessRuleIdentityArgs.builder()\n                .type(\"USER\")\n                .name(\"test-user\")\n                .build())\n            .expireIn(SelfServiceAccessRuleExpireInArgs.builder()\n                .unitType(\"MONTHS\")\n                .units(3)\n                .build())\n            .revokeIfNotUsedInDays(90)\n            .build());\n\n        var selfService2Dataset1 = new SelfServiceAccessRule(\"selfService2Dataset1\", SelfServiceAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(SelfServiceAccessRuleIdentityArgs.builder()\n                .type(\"GROUP\")\n                .groupId(satori_directory_group.group1().id())\n                .build())\n            .expireIn(SelfServiceAccessRuleExpireInArgs.builder()\n                .unitType(\"DAYS\")\n                .units(5)\n                .build())\n            .revokeIfNotUsedInDays(90)\n            .securityPolicies()\n            .build());\n\n        var selfService3Dataset1 = new SelfServiceAccessRule(\"selfService3Dataset1\", SelfServiceAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset1().data_policy_id())\n            .accessLevel(\"READ_WRITE\")\n            .identity(SelfServiceAccessRuleIdentityArgs.builder()\n                .type(\"IDP_GROUP\")\n                .name(\"groupName\")\n                .build())\n            .securityPolicies(\"none\")\n            .enabled(false)\n            .build());\n\n        var selfService1DatasetDefinition1 = new SelfServiceAccessRule(\"selfService1DatasetDefinition1\", SelfServiceAccessRuleArgs.builder()        \n            .parentDataPolicy(satori_dataset.dataset_definition1().data_policy_id())\n            .accessLevel(\"READ_ONLY\")\n            .identity(SelfServiceAccessRuleIdentityArgs.builder()\n                .type(\"EVERYONE\")\n                .build())\n            .securityPolicies(\"8c4745f5-a21e-4b7a-bb21-83c54351539f\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  selfService1Dataset1:\n    type: satori:SelfServiceAccessRule\n    properties:\n      # reference to owning dataset\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      # granted access level, OWNER, READ_WRITE, READ_ONLY\n      accessLevel: OWNER\n      identity:\n        type: USER\n        name: test-user\n      expireIn:\n        unitType: MONTHS\n        units: 3\n      revokeIfNotUsedInDays: 90\n  selfService2Dataset1:\n    type: satori:SelfServiceAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: GROUP\n        groupId: ${satori_directory_group.group1.id}\n      expireIn:\n        unitType: DAYS\n        units: 5\n      revokeIfNotUsedInDays: 90\n      # dataset default security policies\n      securityPolicies: []\n  selfService3Dataset1:\n    type: satori:SelfServiceAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset1.data_policy_id}\n      accessLevel: READ_WRITE\n      identity:\n        type: IDP_GROUP\n        name: groupName\n      # no security policies\n      securityPolicies:\n        - none\n      # suspend this rule\n      enabled: false\n  selfService1DatasetDefinition1:\n    type: satori:SelfServiceAccessRule\n    properties:\n      parentDataPolicy: ${satori_dataset.dataset_definition1.data_policy_id}\n      accessLevel: READ_ONLY\n      identity:\n        type: EVERYONE\n      # specific security policies\n      securityPolicies:\n        - 8c4745f5-a21e-4b7a-bb21-83c54351539f\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireIn": {
                    "$ref": "#/types/satori:index/SelfServiceAccessRuleExpireIn:SelfServiceAccessRuleExpireIn",
                    "description": "Rule expiration settings.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/SelfServiceAccessRuleIdentity:SelfServiceAccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "required": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the rule. Defaults to `true`.\n"
                },
                "expireIn": {
                    "$ref": "#/types/satori:index/SelfServiceAccessRuleExpireIn:SelfServiceAccessRuleExpireIn",
                    "description": "Rule expiration settings.\n"
                },
                "identity": {
                    "$ref": "#/types/satori:index/SelfServiceAccessRuleIdentity:SelfServiceAccessRuleIdentity",
                    "description": "Identity to apply the rule for.\n"
                },
                "parentDataPolicy": {
                    "type": "string",
                    "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                },
                "revokeIfNotUsedInDays": {
                    "type": "integer",
                    "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                },
                "securityPolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "identity",
                "parentDataPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SelfServiceAccessRule resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "Access level to grant, valid values are: READ*ONLY, READ*WRITE, OWNER.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable the rule. Defaults to `true`.\n"
                    },
                    "expireIn": {
                        "$ref": "#/types/satori:index/SelfServiceAccessRuleExpireIn:SelfServiceAccessRuleExpireIn",
                        "description": "Rule expiration settings.\n"
                    },
                    "identity": {
                        "$ref": "#/types/satori:index/SelfServiceAccessRuleIdentity:SelfServiceAccessRuleIdentity",
                        "description": "Identity to apply the rule for.\n"
                    },
                    "parentDataPolicy": {
                        "type": "string",
                        "description": "Parent data policy ID, the data*policy*id field of a dataset.\n"
                    },
                    "revokeIfNotUsedInDays": {
                        "type": "integer",
                        "description": "Revoke access if rule not used in the last given days. Zero = do not revoke. Max value is 180. Defaults to `0`.\n"
                    },
                    "securityPolicies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of security policies to apply to this rule. Empty list for default dataset security policies. [ \"none\" ] list for no policies.\n"
                    }
                },
                "type": "object"
            }
        },
        "satori:index/userSettings:UserSettings": {
            "description": "Currently supported settings configurations are:\n - Attributes\n\n\u003cbr /\u003e\n\u003cbr /\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst settingsForUserJsonPath = new satori.UserSettings(\"settingsForUserJsonPath\", {\n    userId: local.user_id_to_configure_settings_on,\n    attributes: fs.readFileSync(`${path.module}/attributes/user_a.json`, \"utf8\"),\n});\nconst settingsForUserRawJson = new satori.UserSettings(\"settingsForUserRawJson\", {\n    userId: local.user_id_to_configure_settings_on,\n    attributes: JSON.stringify({\n        name: \"William\",\n        age: 30.5,\n        cities: [\n            \"Tel Aviv\",\n            \"London\",\n            \"Lisbon\",\n        ],\n        is_active: true,\n        kids_ages: [\n            1,\n            5,\n            6.5,\n        ],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport satori_resources_config as satori\n\nsettings_for_user_json_path = satori.UserSettings(\"settingsForUserJsonPath\",\n    user_id=local[\"user_id_to_configure_settings_on\"],\n    attributes=(lambda path: open(path).read())(f\"{path['module']}/attributes/user_a.json\"))\nsettings_for_user_raw_json = satori.UserSettings(\"settingsForUserRawJson\",\n    user_id=local[\"user_id_to_configure_settings_on\"],\n    attributes=json.dumps({\n        \"name\": \"William\",\n        \"age\": 30.5,\n        \"cities\": [\n            \"Tel Aviv\",\n            \"London\",\n            \"Lisbon\",\n        ],\n        \"is_active\": True,\n        \"kids_ages\": [\n            1,\n            5,\n            6.5,\n        ],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var settingsForUserJsonPath = new Satori.UserSettings(\"settingsForUserJsonPath\", new()\n    {\n        UserId = local.User_id_to_configure_settings_on,\n        Attributes = File.ReadAllText($\"{path.Module}/attributes/user_a.json\"),\n    });\n\n    var settingsForUserRawJson = new Satori.UserSettings(\"settingsForUserRawJson\", new()\n    {\n        UserId = local.User_id_to_configure_settings_on,\n        Attributes = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"name\"] = \"William\",\n            [\"age\"] = 30.5,\n            [\"cities\"] = new[]\n            {\n                \"Tel Aviv\",\n                \"London\",\n                \"Lisbon\",\n            },\n            [\"is_active\"] = true,\n            [\"kids_ages\"] = new object?[]\n            {\n                1,\n                5,\n                6.5,\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := satori.NewUserSettings(ctx, \"settingsForUserJsonPath\", \u0026satori.UserSettingsArgs{\n\t\t\tUserId:     pulumi.Any(local.User_id_to_configure_settings_on),\n\t\t\tAttributes: readFileOrPanic(fmt.Sprintf(\"%v/attributes/user_a.json\", path.Module)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"name\": \"William\",\n\t\t\t\"age\":  30.5,\n\t\t\t\"cities\": []string{\n\t\t\t\t\"Tel Aviv\",\n\t\t\t\t\"London\",\n\t\t\t\t\"Lisbon\",\n\t\t\t},\n\t\t\t\"is_active\": true,\n\t\t\t\"kids_ages\": []float64{\n\t\t\t\t1,\n\t\t\t\t5,\n\t\t\t\t6.5,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = satori.NewUserSettings(ctx, \"settingsForUserRawJson\", \u0026satori.UserSettingsArgs{\n\t\t\tUserId:     pulumi.Any(local.User_id_to_configure_settings_on),\n\t\t\tAttributes: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.UserSettings;\nimport com.pulumi.satori.UserSettingsArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var settingsForUserJsonPath = new UserSettings(\"settingsForUserJsonPath\", UserSettingsArgs.builder()        \n            .userId(local.user_id_to_configure_settings_on())\n            .attributes(Files.readString(Paths.get(String.format(\"%s/attributes/user_a.json\", path.module()))))\n            .build());\n\n        var settingsForUserRawJson = new UserSettings(\"settingsForUserRawJson\", UserSettingsArgs.builder()        \n            .userId(local.user_id_to_configure_settings_on())\n            .attributes(serializeJson(\n                jsonObject(\n                    jsonProperty(\"name\", \"William\"),\n                    jsonProperty(\"age\", 30.5),\n                    jsonProperty(\"cities\", jsonArray(\n                        \"Tel Aviv\", \n                        \"London\", \n                        \"Lisbon\"\n                    )),\n                    jsonProperty(\"is_active\", true),\n                    jsonProperty(\"kids_ages\", jsonArray(\n                        1, \n                        5, \n                        6.5\n                    ))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  settingsForUserJsonPath:\n    type: satori:UserSettings\n    properties:\n      userId: ${local.user_id_to_configure_settings_on}\n      # You may define a path to a json file containing a JSON object with the attributes for the user.\n      attributes:\n        fn::readFile: ${path.module}/attributes/user_a.json\n  settingsForUserRawJson:\n    type: satori:UserSettings\n    properties:\n      userId: ${local.user_id_to_configure_settings_on}\n      # You may define the attributes in a raw JSON object using terraform's jsoncode({}).\n      attributes:\n        fn::toJSON:\n          name: William\n          age: 30.5\n          cities:\n            - Tel Aviv\n            - London\n            - Lisbon\n          is_active: true\n          kids_ages:\n            - 1\n            - 5\n            - 6.5\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Where the 'user_a.json' file is a JSON map object, for example:\n```json\n{\n  \"name\": \"Ron\",\n  \"age\": 30,\n  \"client_cities\": [\"Washington\", \"Lisbon\", \"Berlin\"],\n  \"is_active\": true\n}\n```\n",
            "properties": {
                "attributes": {
                    "type": "string",
                    "description": "User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: \"./attribute*files/user*a.json\" OR \"{\"company\": \"SatoriCyber\",\"age\": 30.5,\"cities\": [\"Washington\", \"Lisbon\"],\"kids_age\": [1, 3.14759, 7], \"isActive\": true}\"\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID to manage settings for.\n"
                }
            },
            "required": [
                "attributes",
                "userId"
            ],
            "inputProperties": {
                "attributes": {
                    "type": "string",
                    "description": "User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: \"./attribute*files/user*a.json\" OR \"{\"company\": \"SatoriCyber\",\"age\": 30.5,\"cities\": [\"Washington\", \"Lisbon\"],\"kids_age\": [1, 3.14759, 7], \"isActive\": true}\"\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID to manage settings for.\n"
                }
            },
            "requiredInputs": [
                "attributes",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSettings resources.\n",
                "properties": {
                    "attributes": {
                        "type": "string",
                        "description": "User's set of attributes in JSON object format. may include the following types: int, string, float, boolean, string[], number[], where number may be float/int. The value may be a path to a json file that contains the attributes for a user or a raw JSON string, for example: \"./attribute*files/user*a.json\" OR \"{\"company\": \"SatoriCyber\",\"age\": 30.5,\"cities\": [\"Washington\", \"Lisbon\"],\"kids_age\": [1, 3.14759, 7], \"isActive\": true}\"\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID to manage settings for.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "satori:index/getDacDeploymentSettings:getDacDeploymentSettings": {
            "description": "The **satori_dac_deployment_settings** data source allows finding DAC deployment settings by it's ID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@pulumi/satori\";\n\nconst dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\nconst deploymentSettings = satori.getDacDeploymentSettings({\n    id: dataaccessControllerId,\n});\n```\n```python\nimport pulumi\nimport pulumi_satori as satori\n\ndataaccess_controller_id = \"\u003cassigned dataaccess_controller_id\u003e\"\ndeployment_settings = satori.get_dac_deployment_settings(id=dataaccess_controller_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Pulumi.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n    var deploymentSettings = Satori.GetDacDeploymentSettings.Invoke(new()\n    {\n        Id = dataaccessControllerId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataaccessControllerId := \"\u003cassigned dataaccess_controller_id\u003e\"\n\t\t_, err := satori.GetDacDeploymentSettings(ctx, \u0026satori.GetDacDeploymentSettingsArgs{\n\t\t\tId: dataaccessControllerId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SatoriFunctions;\nimport com.pulumi.satori.inputs.GetDacDeploymentSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n        final var deploymentSettings = SatoriFunctions.getDacDeploymentSettings(GetDacDeploymentSettingsArgs.builder()\n            .id(dataaccessControllerId)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dataaccessControllerId: \u003cassigned dataaccess_controller_id\u003e\n  deploymentSettings:\n    fn::invoke:\n      Function: satori:getDacDeploymentSettings\n      Arguments:\n        id: ${dataaccessControllerId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDacDeploymentSettings.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "DAC's id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDacDeploymentSettings.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "DAC's id.\n"
                    },
                    "serviceAccount": {
                        "type": "string",
                        "description": "The DAC's deployments service account\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "serviceAccount"
                ]
            }
        },
        "satori:index/getDataAccessController:getDataAccessController": {
            "description": "The **satori_data_access_controller** data source allows finding DAC details by its region, cloud provider, type and ID.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as satori from \"@pulumi/satori\";\nimport * as satori from \"@satoricyber/pulumi-satori\";\n\nconst dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\nconst publicDac = satori.getDataAccessController({\n    type: \"PUBLIC\",\n    region: \"\u003cassigned region\u003e\",\n    cloudProvider: \"\u003cassigned cloud provider\u003e\",\n});\nconst privateDac = satori.getDataAccessController({\n    type: \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n    id: \"\u003cassigned id\u003e\",\n});\nconst datastore0 = new satori.Datastore(\"datastore0\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: dataaccessControllerId,\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    baselineSecurityPolicy: {\n        unassociatedQueriesCategory: {\n            queryAction: \"PASS\",\n        },\n        unsupportedQueriesCategory: {\n            queryAction: \"PASS\",\n        },\n        exclusions: {},\n    },\n    networkPolicies: [{}],\n});\nconst datastoreWithIgnorePasswordUpdate = new satori.Datastore(\"datastoreWithIgnorePasswordUpdate\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    satoriAuthSettings: {\n        enabled: true,\n        credentials: {\n            password: \"*********\",\n            username: \"adminuser\",\n        },\n    },\n    networkPolicies: [{}],\n});\n// Example of creating a datastore with personal access token enabled\n// Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n// The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\nconst datastoreWithPersonalAccessTokenEnabled = new satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    satoriAuthSettings: {\n        enabled: true,\n        credentials: {\n            password: \"*********\",\n            username: \"adminuser\",\n        },\n        enablePersonalAccessToken: true,\n    },\n    networkPolicies: [{}],\n});\nconst datastoreWithPrivateDac = new satori.Datastore(\"datastoreWithPrivateDac\", {\n    hostname: \"data.source.target.hostname\",\n    dataaccessControllerId: privateDac.then(privateDac =\u003e privateDac.id),\n    type: \"SNOWFLAKE\",\n    originPort: 8081,\n    networkPolicies: [{}],\n});\nconst mongodbDatastore = new satori.Datastore(\"mongodbDatastore\", {\n    hostname: \"mongo.example.mongodb.net\",\n    dataaccessControllerId: publicDac.then(publicDac =\u003e publicDac.id),\n    type: \"MONGO\",\n    datastoreSettings: [{\n        deploymentType: \"MONGODB_SRV\",\n    }],\n    networkPolicies: [{}],\n});\nexport const datastoreCreatedId = datastore0.id;\n```\n```python\nimport pulumi\nimport pulumi_satori as satori\nimport satori_resources_config as satori\n\ndataaccess_controller_id = \"\u003cassigned dataaccess_controller_id\u003e\"\npublic_dac = satori.get_data_access_controller(type=\"PUBLIC\",\n    region=\"\u003cassigned region\u003e\",\n    cloud_provider=\"\u003cassigned cloud provider\u003e\")\nprivate_dac = satori.get_data_access_controller(type=\"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n    id=\"\u003cassigned id\u003e\")\ndatastore0 = satori.Datastore(\"datastore0\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=dataaccess_controller_id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    baseline_security_policy=satori.DatastoreBaselineSecurityPolicyArgs(\n        unassociated_queries_category=satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs(\n            query_action=\"PASS\",\n        ),\n        unsupported_queries_category=satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs(\n            query_action=\"PASS\",\n        ),\n        exclusions=satori.DatastoreBaselineSecurityPolicyExclusionsArgs(),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\ndatastore_with_ignore_password_update = satori.Datastore(\"datastoreWithIgnorePasswordUpdate\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    satori_auth_settings=satori.DatastoreSatoriAuthSettingsArgs(\n        enabled=True,\n        credentials=satori.DatastoreSatoriAuthSettingsCredentialsArgs(\n            password=\"*********\",\n            username=\"adminuser\",\n        ),\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\n# Example of creating a datastore with personal access token enabled\n# Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n# The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\ndatastore_with_personal_access_token_enabled = satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    satori_auth_settings=satori.DatastoreSatoriAuthSettingsArgs(\n        enabled=True,\n        credentials=satori.DatastoreSatoriAuthSettingsCredentialsArgs(\n            password=\"*********\",\n            username=\"adminuser\",\n        ),\n        enable_personal_access_token=True,\n    ),\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\ndatastore_with_private_dac = satori.Datastore(\"datastoreWithPrivateDac\",\n    hostname=\"data.source.target.hostname\",\n    dataaccess_controller_id=private_dac.id,\n    type=\"SNOWFLAKE\",\n    origin_port=8081,\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\nmongodb_datastore = satori.Datastore(\"mongodbDatastore\",\n    hostname=\"mongo.example.mongodb.net\",\n    dataaccess_controller_id=public_dac.id,\n    type=\"MONGO\",\n    datastore_settings=[satori.DatastoreDatastoreSettingArgs(\n        deployment_type=\"MONGODB_SRV\",\n    )],\n    network_policies=[satori.DatastoreNetworkPolicyArgs()])\npulumi.export(\"datastoreCreatedId\", datastore0.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Satori = Pulumi.Satori;\nusing Satori = Satoricyber.Satori;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n    var publicDac = Satori.GetDataAccessController.Invoke(new()\n    {\n        Type = \"PUBLIC\",\n        Region = \"\u003cassigned region\u003e\",\n        CloudProvider = \"\u003cassigned cloud provider\u003e\",\n    });\n\n    var privateDac = Satori.GetDataAccessController.Invoke(new()\n    {\n        Type = \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n        Id = \"\u003cassigned id\u003e\",\n    });\n\n    var datastore0 = new Satori.Datastore(\"datastore0\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = dataaccessControllerId,\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        BaselineSecurityPolicy = new Satori.Inputs.DatastoreBaselineSecurityPolicyArgs\n        {\n            UnassociatedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs\n            {\n                QueryAction = \"PASS\",\n            },\n            UnsupportedQueriesCategory = new Satori.Inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs\n            {\n                QueryAction = \"PASS\",\n            },\n            Exclusions = null,\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var datastoreWithIgnorePasswordUpdate = new Satori.Datastore(\"datastoreWithIgnorePasswordUpdate\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        SatoriAuthSettings = new Satori.Inputs.DatastoreSatoriAuthSettingsArgs\n        {\n            Enabled = true,\n            Credentials = new Satori.Inputs.DatastoreSatoriAuthSettingsCredentialsArgs\n            {\n                Password = \"*********\",\n                Username = \"adminuser\",\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    // Example of creating a datastore with personal access token enabled\n    // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n    // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n    var datastoreWithPersonalAccessTokenEnabled = new Satori.Datastore(\"datastoreWithPersonalAccessTokenEnabled\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        SatoriAuthSettings = new Satori.Inputs.DatastoreSatoriAuthSettingsArgs\n        {\n            Enabled = true,\n            Credentials = new Satori.Inputs.DatastoreSatoriAuthSettingsCredentialsArgs\n            {\n                Password = \"*********\",\n                Username = \"adminuser\",\n            },\n            EnablePersonalAccessToken = true,\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var datastoreWithPrivateDac = new Satori.Datastore(\"datastoreWithPrivateDac\", new()\n    {\n        Hostname = \"data.source.target.hostname\",\n        DataaccessControllerId = privateDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"SNOWFLAKE\",\n        OriginPort = 8081,\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    var mongodbDatastore = new Satori.Datastore(\"mongodbDatastore\", new()\n    {\n        Hostname = \"mongo.example.mongodb.net\",\n        DataaccessControllerId = publicDac.Apply(getDataAccessControllerResult =\u003e getDataAccessControllerResult.Id),\n        Type = \"MONGO\",\n        DatastoreSettings = new[]\n        {\n            new Satori.Inputs.DatastoreDatastoreSettingArgs\n            {\n                DeploymentType = \"MONGODB_SRV\",\n            },\n        },\n        NetworkPolicies = new[]\n        {\n            null,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"datastoreCreatedId\"] = datastore0.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SatoriCyber/pulumi-satori/sdk/go/satori\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdataaccessControllerId := \"\u003cassigned dataaccess_controller_id\u003e\"\n\t\tpublicDac, err := satori.GetDataAccessController(ctx, \u0026satori.GetDataAccessControllerArgs{\n\t\t\tType:          \"PUBLIC\",\n\t\t\tRegion:        pulumi.StringRef(\"\u003cassigned region\u003e\"),\n\t\t\tCloudProvider: pulumi.StringRef(\"\u003cassigned cloud provider\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tprivateDac, err := satori.GetDataAccessController(ctx, \u0026satori.GetDataAccessControllerArgs{\n\t\t\tType: \"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\",\n\t\t\tId:   pulumi.StringRef(\"\u003cassigned id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdatastore0, err := satori.NewDatastore(ctx, \"datastore0\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(dataaccessControllerId),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tBaselineSecurityPolicy: \u0026satori.DatastoreBaselineSecurityPolicyArgs{\n\t\t\t\tUnassociatedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"PASS\"),\n\t\t\t\t},\n\t\t\t\tUnsupportedQueriesCategory: \u0026satori.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs{\n\t\t\t\t\tQueryAction: pulumi.String(\"PASS\"),\n\t\t\t\t},\n\t\t\t\tExclusions: nil,\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithIgnorePasswordUpdate\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tSatoriAuthSettings: \u0026satori.DatastoreSatoriAuthSettingsArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tCredentials: \u0026satori.DatastoreSatoriAuthSettingsCredentialsArgs{\n\t\t\t\t\tPassword: pulumi.String(\"*********\"),\n\t\t\t\t\tUsername: pulumi.String(\"adminuser\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Example of creating a datastore with personal access token enabled\n\t\t// Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n\t\t// The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithPersonalAccessTokenEnabled\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tSatoriAuthSettings: \u0026satori.DatastoreSatoriAuthSettingsArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tCredentials: \u0026satori.DatastoreSatoriAuthSettingsCredentialsArgs{\n\t\t\t\t\tPassword: pulumi.String(\"*********\"),\n\t\t\t\t\tUsername: pulumi.String(\"adminuser\"),\n\t\t\t\t},\n\t\t\t\tEnablePersonalAccessToken: pulumi.Bool(true),\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"datastoreWithPrivateDac\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"data.source.target.hostname\"),\n\t\t\tDataaccessControllerId: pulumi.String(privateDac.Id),\n\t\t\tType:                   pulumi.String(\"SNOWFLAKE\"),\n\t\t\tOriginPort:             pulumi.Int(8081),\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = satori.NewDatastore(ctx, \"mongodbDatastore\", \u0026satori.DatastoreArgs{\n\t\t\tHostname:               pulumi.String(\"mongo.example.mongodb.net\"),\n\t\t\tDataaccessControllerId: pulumi.String(publicDac.Id),\n\t\t\tType:                   pulumi.String(\"MONGO\"),\n\t\t\tDatastoreSettings: satori.DatastoreDatastoreSettingArray{\n\t\t\t\t\u0026satori.DatastoreDatastoreSettingArgs{\n\t\t\t\t\tDeploymentType: pulumi.String(\"MONGODB_SRV\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkPolicies: satori.DatastoreNetworkPolicyArray{\n\t\t\t\tnil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"datastoreCreatedId\", datastore0.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SatoriFunctions;\nimport com.pulumi.satori.inputs.GetDataAccessControllerArgs;\nimport com.pulumi.satori.Datastore;\nimport com.pulumi.satori.DatastoreArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs;\nimport com.pulumi.satori.inputs.DatastoreBaselineSecurityPolicyExclusionsArgs;\nimport com.pulumi.satori.inputs.DatastoreNetworkPolicyArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsArgs;\nimport com.pulumi.satori.inputs.DatastoreSatoriAuthSettingsCredentialsArgs;\nimport com.pulumi.satori.inputs.DatastoreDatastoreSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataaccessControllerId = \"\u003cassigned dataaccess_controller_id\u003e\";\n\n        final var publicDac = SatoriFunctions.getDataAccessController(GetDataAccessControllerArgs.builder()\n            .type(\"PUBLIC\")\n            .region(\"\u003cassigned region\u003e\")\n            .cloudProvider(\"\u003cassigned cloud provider\u003e\")\n            .build());\n\n        final var privateDac = SatoriFunctions.getDataAccessController(GetDataAccessControllerArgs.builder()\n            .type(\"\u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\")\n            .id(\"\u003cassigned id\u003e\")\n            .build());\n\n        var datastore0 = new Datastore(\"datastore0\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(dataaccessControllerId)\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .baselineSecurityPolicy(DatastoreBaselineSecurityPolicyArgs.builder()\n                .unassociatedQueriesCategory(DatastoreBaselineSecurityPolicyUnassociatedQueriesCategoryArgs.builder()\n                    .queryAction(\"PASS\")\n                    .build())\n                .unsupportedQueriesCategory(DatastoreBaselineSecurityPolicyUnsupportedQueriesCategoryArgs.builder()\n                    .queryAction(\"PASS\")\n                    .build())\n                .exclusions()\n                .build())\n            .networkPolicies()\n            .build());\n\n        var datastoreWithIgnorePasswordUpdate = new Datastore(\"datastoreWithIgnorePasswordUpdate\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .satoriAuthSettings(DatastoreSatoriAuthSettingsArgs.builder()\n                .enabled(true)\n                .credentials(DatastoreSatoriAuthSettingsCredentialsArgs.builder()\n                    .password(\"*********\")\n                    .username(\"adminuser\")\n                    .build())\n                .build())\n            .networkPolicies()\n            .build());\n\n        // Example of creating a datastore with personal access token enabled\n        // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n        // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n        var datastoreWithPersonalAccessTokenEnabled = new Datastore(\"datastoreWithPersonalAccessTokenEnabled\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .satoriAuthSettings(DatastoreSatoriAuthSettingsArgs.builder()\n                .enabled(true)\n                .credentials(DatastoreSatoriAuthSettingsCredentialsArgs.builder()\n                    .password(\"*********\")\n                    .username(\"adminuser\")\n                    .build())\n                .enablePersonalAccessToken(true)\n                .build())\n            .networkPolicies()\n            .build());\n\n        var datastoreWithPrivateDac = new Datastore(\"datastoreWithPrivateDac\", DatastoreArgs.builder()        \n            .hostname(\"data.source.target.hostname\")\n            .dataaccessControllerId(privateDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"SNOWFLAKE\")\n            .originPort(8081)\n            .networkPolicies()\n            .build());\n\n        var mongodbDatastore = new Datastore(\"mongodbDatastore\", DatastoreArgs.builder()        \n            .hostname(\"mongo.example.mongodb.net\")\n            .dataaccessControllerId(publicDac.applyValue(getDataAccessControllerResult -\u003e getDataAccessControllerResult.id()))\n            .type(\"MONGO\")\n            .datastoreSettings(DatastoreDatastoreSettingArgs.builder()\n                .deploymentType(\"MONGODB_SRV\")\n                .build())\n            .networkPolicies()\n            .build());\n\n        ctx.export(\"datastoreCreatedId\", datastore0.id());\n    }\n}\n```\n```yaml\nresources:\n  datastore0:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${dataaccessControllerId}\n      type: SNOWFLAKE\n      originPort: 8081\n      baselineSecurityPolicy:\n        unassociatedQueriesCategory:\n          queryAction: PASS\n        unsupportedQueriesCategory:\n          queryAction: PASS\n        exclusions: {}\n      networkPolicies:\n        - {}\n  datastoreWithIgnorePasswordUpdate:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${publicDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      satoriAuthSettings:\n        enabled: true\n        credentials:\n          password: '*********'\n          username: adminuser\n      networkPolicies:\n        - {}\n  # Example of creating a datastore with personal access token enabled\n  # // Personal access token is used to authenticate with the datastore using a personal access token instead of temporary credentials.\n  # // The personal access token requires the satori_auth_settings to be enabled. and also requires the Personal Access Token feature to be enabled for the account (Account Setting page on Satori platform).\n  datastoreWithPersonalAccessTokenEnabled:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${publicDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      satoriAuthSettings:\n        enabled: true\n        credentials:\n          password: '*********'\n          username: adminuser\n        enablePersonalAccessToken: true\n      networkPolicies:\n        - {}\n  datastoreWithPrivateDac:\n    type: satori:Datastore\n    properties:\n      hostname: data.source.target.hostname\n      dataaccessControllerId: ${privateDac.id}\n      type: SNOWFLAKE\n      originPort: 8081\n      networkPolicies:\n        - {}\n  mongodbDatastore:\n    type: satori:Datastore\n    properties:\n      hostname: mongo.example.mongodb.net\n      dataaccessControllerId: ${publicDac.id}\n      type: MONGO\n      datastoreSettings:\n        - deploymentType: MONGODB_SRV\n      networkPolicies:\n        - {}\nvariables:\n  dataaccessControllerId: \u003cassigned dataaccess_controller_id\u003e\n  publicDac:\n    fn::invoke:\n      Function: satori:getDataAccessController\n      Arguments:\n        type: PUBLIC\n        region: \u003cassigned region\u003e\n        cloudProvider: \u003cassigned cloud provider\u003e\n  privateDac:\n    fn::invoke:\n      Function: satori:getDataAccessController\n      Arguments:\n        type: \u003cassigned type - PRIVATE | PRIVATE_MANAGED\u003e\n        id: \u003cassigned id\u003e\noutputs:\n  # output of generated id for newly created datastore\n  datastoreCreatedId: ${datastore0.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDataAccessController.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "DAC's cloud provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "DAC's ID.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "DAC's region.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "DAC's type. The available values are: PRIVATE, PRIVATE_MANAGED or PUBLIC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDataAccessController.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "DAC's cloud provider.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "DAC's ID.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "DAC's IPs list.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "DAC's region.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "DAC's type. The available values are: PRIVATE, PRIVATE_MANAGED or PUBLIC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ips",
                    "type"
                ]
            }
        },
        "satori:index/getUser:getUser": {
            "description": "The **satori_user** data source allows finding user ID by user email.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.satori.SatoriFunctions;\nimport com.pulumi.satori.inputs.GetUserArgs;\nimport com.pulumi.satori.Dataset;\nimport com.pulumi.satori.DatasetArgs;\nimport com.pulumi.satori.inputs.DatasetDefinitionArgs;\nimport com.pulumi.satori.inputs.DatasetAccessControlSettingsArgs;\nimport com.pulumi.satori.inputs.DatasetCustomPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dataSteward1 = SatoriFunctions.getUser(GetUserArgs.builder()\n            .email(\"data-steward@acme.organization\")\n            .build());\n\n        var dataset1 = new Dataset(\"dataset1\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .approvers(                \n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"GROUP\")\n                        .id(\"788680b7-461d-493a-a3d6-86e71fd01ff2\")\n                        .build(),\n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"USER\")\n                        .id(\"3d174db4-4526-4469-2fda-46d0dd2a7f7d\")\n                        .build(),\n                    DatasetDefinitionApproverArgs.builder()\n                        .type(\"USER\")\n                        .id(dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .build())\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db2\")\n                                .schema(\"schema1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db2\")\n                                .schema(\"schema2\")\n                                .table(\"table\")\n                                .build())\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .location(DatasetDefinitionExcludeLocationLocationArgs.builder()\n                        .relationalLocation(DatasetDefinitionExcludeLocationLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema1\")\n                            .table(\"tableX\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n        // Example with different location types\n        var dataset2 = new Dataset(\"dataset2\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .relationalLocation(DatasetDefinitionIncludeLocationLocationRelationalLocationArgs.builder()\n                                .db(\"db1\")\n                                .schema(\"schema1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"3go33ff5-95cf-474f-a1d6-d5084810dd5k\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .mongoLocation(DatasetDefinitionIncludeLocationLocationMongoLocationArgs.builder()\n                                .db(\"db1\")\n                                .collection(\"collection1\")\n                                .build())\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"8kl43ff5-95cf-474f-a1d6-d508481049lw\")\n                        .location(DatasetDefinitionIncludeLocationLocationArgs.builder()\n                            .s3Location(DatasetDefinitionIncludeLocationLocationS3LocationArgs.builder()\n                                .bucket(\"bucket1\")\n                                .objectKey(\"a/b/c\")\n                                .build())\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .location(DatasetDefinitionExcludeLocationLocationArgs.builder()\n                        .relationalLocation(DatasetDefinitionExcludeLocationLocationRelationalLocationArgs.builder()\n                            .db(\"db1\")\n                            .schema(\"schema1\")\n                            .table(\"tableX\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n        // Example with deprecated usage of relational_location field\n        var dataset3 = new Dataset(\"dataset3\", DatasetArgs.builder()        \n            .definition(DatasetDefinitionArgs.builder()\n                .name(\"satori_dataset terraform test\")\n                .description(\"from satori terraform provider\")\n                .owners(                \n                    \"522fb8ab-8d7b-4498-b39d-6911e2839253\",\n                    dataSteward1.applyValue(getUserResult -\u003e getUserResult.id()))\n                .includeLocations(                \n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"12345678-95cf-474f-a1d6-d5084810dd95\")\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db1\")\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema1\")\n                            .build())\n                        .build(),\n                    DatasetDefinitionIncludeLocationArgs.builder()\n                        .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                        .relationalLocation(DatasetDefinitionIncludeLocationRelationalLocationArgs.builder()\n                            .db(\"db2\")\n                            .schema(\"schema2\")\n                            .table(\"table\")\n                            .build())\n                        .build())\n                .excludeLocations(DatasetDefinitionExcludeLocationArgs.builder()\n                    .datastore(\"80f33ff5-95cf-474f-a1d6-d5084810dd95\")\n                    .relationalLocation(DatasetDefinitionExcludeLocationRelationalLocationArgs.builder()\n                        .db(\"db2\")\n                        .schema(\"schema1\")\n                        .table(\"tableX\")\n                        .build())\n                    .build())\n                .build())\n            .accessControlSettings(DatasetAccessControlSettingsArgs.builder()\n                .enableAccessControl(false)\n                .enableUserRequests(false)\n                .enableSelfService(false)\n                .build())\n            .customPolicy(DatasetCustomPolicyArgs.builder()\n                .rulesYaml(Files.readString(Paths.get(String.format(\"%s/rules.yaml\", path.module()))))\n                .tagsYaml(Files.readString(Paths.get(String.format(\"%s/tags.yaml\", path.module()))))\n                .build())\n            .securityPolicies(\"56412aff-6ecf-4eff-9b96-2e0f6ec36c42\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dataset1:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        approvers:\n          - type: GROUP\n            id: 788680b7-461d-493a-a3d6-86e71fd01ff2\n          - type: USER\n            id: 3d174db4-4526-4469-2fda-46d0dd2a7f7d\n          - type: USER\n            id: ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema2\n                table: table\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db2\n                schema: schema1\n                table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\n  # Example with different location types\n  dataset2:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n                schema: schema1\n          - datastore: 3go33ff5-95cf-474f-a1d6-d5084810dd5k\n            location:\n              mongoLocation:\n                db: db1\n                collection: collection1\n          - datastore: 8kl43ff5-95cf-474f-a1d6-d508481049lw\n            location:\n              s3Location:\n                bucket: bucket1\n                objectKey: a/b/c\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            location:\n              relationalLocation:\n                db: db1\n                schema: schema1\n                table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\n  # Example with deprecated usage of relational_location field\n  dataset3:\n    type: satori:Dataset\n    properties:\n      definition:\n        name: satori_dataset terraform test\n        description: from satori terraform provider\n        owners:\n          - 522fb8ab-8d7b-4498-b39d-6911e2839253\n          - ${dataSteward1.id}\n        includeLocations:\n          - datastore: 12345678-95cf-474f-a1d6-d5084810dd95\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema1\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema2\n              table: table\n        excludeLocations:\n          - datastore: 80f33ff5-95cf-474f-a1d6-d5084810dd95\n            relationalLocation:\n              db: db2\n              schema: schema1\n              table: tableX\n      accessControlSettings:\n        enableAccessControl: false\n        enableUserRequests: false\n        enableSelfService: false\n      customPolicy:\n        rulesYaml:\n          fn::readFile: ${path.module}/rules.yaml\n        tagsYaml:\n          fn::readFile: ${path.module}/tags.yaml\n      securityPolicies:\n        - 56412aff-6ecf-4eff-9b96-2e0f6ec36c42\nvariables:\n  dataSteward1:\n    fn::invoke:\n      Function: satori:getUser\n      Arguments:\n        email: data-steward@acme.organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "User's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id"
                ]
            }
        }
    }
}